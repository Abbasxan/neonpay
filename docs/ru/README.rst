–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è NEONPAY (–†—É—Å—Å–∫–∏–π)
===============================

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–ª–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é NEONPAY. –≠—Ç–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ Telegram Stars –≤ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
----------

1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞
2. –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
4. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
5. –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API
6. –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
7. –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
8. –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
9. –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫
10. –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–£—Å—Ç–∞–Ω–æ–≤–∫–∞
---------

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NEONPAY —Å –ø–æ–º–æ—â—å—é pip:

.. code-block:: bash

   pip install neonpay

–î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –±–æ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:

.. code-block:: bash

   # –î–ª—è Pyrogram
   pip install neonpay pyrogram
   
   # –î–ª—è Aiogram
   pip install neonpay aiogram
   
   # –î–ª—è python-telegram-bot
   pip install neonpay python-telegram-bot
   
   # –î–ª—è pyTelegramBotAPI
   pip install neonpay pyTelegramBotAPI

–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
-------------

1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: bash

   # –î–ª—è Aiogram (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
   pip install neonpay aiogram
   
   # –î–ª—è Pyrogram
   pip install neonpay pyrogram
   
   # –î–ª—è pyTelegramBotAPI
   pip install neonpay pyTelegramBotAPI

2. –ò–º–ø–æ—Ä—Ç –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from neonpay.factory import create_neonpay
   from neonpay.core import PaymentStage, PaymentStatus
   
   # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
   neonpay = create_neonpay(bot_instance=–≤–∞—à_—ç–∫–∑–µ–º–ø–ª—è—Ä_–±–æ—Ç–∞)

3. –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   stage = PaymentStage(
       title="–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
       description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π",
       price=25,  # 25 Telegram Stars
   )
   
   neonpay.create_payment_stage("premium_access", stage)

4. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   await neonpay.send_payment(user_id=12345, stage_id="premium_access")

5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   @neonpay.on_payment
   async def handle_payment(result):
       if result.status == PaymentStatus.COMPLETED:
           print(f"–ü–æ–ª—É—á–µ–Ω–æ {result.amount} –∑–≤–µ–∑–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {result.user_id}")
           # –î–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç/—É—Å–ª—É–≥—É –∑–¥–µ—Å—å

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
-------------------

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Aiogram (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from aiogram import Bot, Dispatcher, Router
   from aiogram.filters import Command
   from neonpay.factory import create_neonpay
   from neonpay.core import PaymentStage, PaymentStatus
   
   bot = Bot(token="–í–ê–®_–¢–û–ö–ï–ù")
   dp = Dispatcher()
   router = Router()
   
   neonpay = create_neonpay(bot_instance=bot, dispatcher=dp)
   
   # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
   stage = PaymentStage(
       title="–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
       description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π",
       price=25,
   )
   neonpay.create_payment_stage("premium_access", stage)
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
   @neonpay.on_payment
   async def handle_payment(result):
       if result.status == PaymentStatus.COMPLETED:
           await bot.send_message(
               result.user_id, 
               f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω! üéâ"
           )
   
   @router.message(Command("buy"))
   async def buy_handler(message: Message):
       await neonpay.send_payment(message.from_user.id, "premium_access")
   
   dp.include_router(router)

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Pyrogram
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from pyrogram import Client, filters
   from neonpay.factory import create_neonpay
   from neonpay.core import PaymentStage, PaymentStatus
   
   app = Client("my_bot", bot_token="–í–ê–®_–¢–û–ö–ï–ù")
   neonpay = create_neonpay(bot_instance=app)
   
   # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
   stage = PaymentStage(
       title="–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
       description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π",
       price=25,
   )
   neonpay.create_payment_stage("premium_access", stage)
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
   @neonpay.on_payment
   async def handle_payment(result):
       if result.status == PaymentStatus.COMPLETED:
           await app.send_message(
               result.user_id, 
               f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω! üéâ"
           )
   
   @app.on_message(filters.command("buy"))
   async def buy_handler(client, message):
       await neonpay.send_payment(message.from_user.id, "premium_access")
   
   app.run()

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å pyTelegramBotAPI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from telebot import TeleBot
   from neonpay.factory import create_neonpay
   from neonpay.core import PaymentStage, PaymentStatus
   
   bot = TeleBot("–í–ê–®_–¢–û–ö–ï–ù")
   neonpay = create_neonpay(bot_instance=bot)
   
   # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
   stage = PaymentStage(
       title="–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
       description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π",
       price=25,
   )
   neonpay.create_payment_stage("premium_access", stage)
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
   @neonpay.on_payment
   async def handle_payment(result):
       if result.status == PaymentStatus.COMPLETED:
           bot.send_message(
               result.user_id, 
               f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω! üéâ"
           )
   
   @bot.message_handler(commands=['buy'])
   def buy_handler(message):
       import asyncio
       asyncio.run(neonpay.send_payment(message.from_user.id, "premium_access"))
   
   bot.infinity_polling()

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
------------------

–≠—Ç–∞–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
~~~~~~~~~~~~~~~

–≠—Ç–∞–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç, —á—Ç–æ –ø–æ–∫—É–ø–∞—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:

.. code-block:: python

   stage = PaymentStage(
       title="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",           # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
       description="–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞",      # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –û–ø–∏—Å–∞–Ω–∏–µ
       price=100,                          # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –¶–µ–Ω–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö
       label="–ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å",             # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ú–µ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
       photo_url="https://...",            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
       payload={"custom": "data"},         # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
       start_parameter="ref_code"          # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ü–∞—Ä–∞–º–µ—Ç—Ä –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏
   )

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π
~~~~~~~~~~~~~~~~~~~

–ö–æ–≥–¥–∞ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ `PaymentResult`:

.. code-block:: python

   @neonpay.on_payment
   async def handle_payment(result: PaymentResult):
       print(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result.user_id}")
       print(f"–°—É–º–º–∞: {result.amount}")
       print(f"–í–∞–ª—é—Ç–∞: {result.currency}")
       print(f"–°—Ç–∞—Ç—É—Å: {result.status}")
       print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {result.metadata}")

–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
~~~~~~~~~~~~~~~~~

.. code-block:: python

   from neonpay import NeonPayError, PaymentError
   
   try:
       await neonpay.send_payment(user_id, "stage_id")
   except PaymentError as e:
       print(f"–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
   except NeonPayError as e:
       print(f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API
--------------

–ö–ª–∞—Å—Å NeonPayCore
~~~~~~~~~~~~~~~~~~

–ú–µ—Ç–æ–¥—ã:

- `create_payment_stage(stage_id: str, stage: PaymentStage)` - –°–æ–∑–¥–∞—Ç—å —ç—Ç–∞–ø –ø–ª–∞—Ç–µ–∂–∞
- `get_payment_stage(stage_id: str)` - –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–∞–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID
- `list_payment_stages()` - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
- `remove_payment_stage(stage_id: str)` - –£–¥–∞–ª–∏—Ç—å —ç—Ç–∞–ø –ø–ª–∞—Ç–µ–∂–∞
- `send_payment(user_id: int, stage_id: str)` - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É
- `on_payment(callback)` - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å callback –ø–ª–∞—Ç–µ–∂–∞
- `get_stats()` - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã

–ö–ª–∞—Å—Å PaymentStage
~~~~~~~~~~~~~~~~~~~

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:

- `title: str` - –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–ª–∞—Ç–µ–∂–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- `description: str` - –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- `price: int` - –¶–µ–Ω–∞ –≤ Telegram Stars (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
- `label: str` - –ú–µ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–ü–ª–∞—Ç–µ–∂")
- `photo_url: str` - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- `payload: dict` - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- `start_parameter: str` - –ü–∞—Ä–∞–º–µ—Ç—Ä –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ö–ª–∞—Å—Å PaymentResult
~~~~~~~~~~~~~~~~~~~~

–ê—Ç—Ä–∏–±—É—Ç—ã:

- `user_id: int` - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–≤–µ—Ä—à–∏–≤—à–∏–π –ø–ª–∞—Ç–µ–∂
- `amount: int` - –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
- `currency: str` - –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (XTR)
- `status: PaymentStatus` - –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
- `transaction_id: str` - ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
- `metadata: dict` - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ

–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
----------------

–í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ **—Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –±–æ—Ç–∞—Ö** –∏ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É examples –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π.

–ë–æ—Ç –¥–ª—è –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from neonpay.factory import create_neonpay
   from neonpay.core import PaymentStage, PaymentStatus
   
   # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
   DONATE_OPTIONS = [
       {"amount": 1, "symbol": "‚≠ê", "desc": "1‚≠ê –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–æ—Ç–∞"},
       {"amount": 10, "symbol": "‚≠ê", "desc": "10‚≠ê –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ë—É–¥–µ—Ç –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"},
       {"amount": 50, "symbol": "üåü", "desc": "50‚≠ê –±–æ–ª—å—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –±–æ—Ç–∞"},
   ]
   
   neonpay = create_neonpay(bot_instance=bot)
   
   # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
   for option in DONATE_OPTIONS:
       neonpay.create_payment_stage(
           f"donate_{option['amount']}",
           PaymentStage(
               title=f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ {option['amount']}{option['symbol']}",
               description=option["desc"],
               price=option["amount"],
           ),
       )
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
   @neonpay.on_payment
   async def handle_payment(result):
       if result.status == PaymentStatus.COMPLETED:
           if result.stage_id.startswith("donate_"):
               await bot.send_message(
                   result.user_id,
                   f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {result.amount}‚≠ê ‚ù§Ô∏è\n"
                   f"–í–∞—à –≤–∫–ª–∞–¥ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞!"
               )

–¶–∏—Ñ—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω
~~~~~~~~~~~~~~~~

.. code-block:: python

   # –¶–∏—Ñ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
   DIGITAL_PRODUCTS = [
       {
           "id": "premium_access",
           "title": "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø",
           "description": "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π",
           "price": 25,
           "symbol": "üëë"
       },
       {
           "id": "custom_theme",
           "title": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞",
           "description": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –∏ —Ü–≤–µ—Ç–∞ –±–æ—Ç–∞",
           "price": 15,
           "symbol": "üé®"
       },
   ]
   
   # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   for product in DIGITAL_PRODUCTS:
       neonpay.create_payment_stage(
           product["id"],
           PaymentStage(
               title=f"{product['symbol']} {product['title']}",
               description=product["description"],
               price=product["price"],
           ),
       )
   
   # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   @neonpay.on_payment
   async def handle_payment(result):
       if result.status == PaymentStatus.COMPLETED:
           if not result.stage_id.startswith("donate_"):
               product = next((p for p in DIGITAL_PRODUCTS if p["id"] == result.stage_id), None)
               if product:
                   await bot.send_message(
                       result.user_id,
                       f"üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!\n\n"
                       f"–ü—Ä–æ–¥—É–∫—Ç: {product['symbol']} {product['title']}\n"
                       f"–¶–µ–Ω–∞: {product['price']}‚≠ê\n\n"
                       f"–í–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                       f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üöÄ"
                   )

–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏
---------------

1. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   @neonpay.on_payment
   async def handle_payment(result):
       # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
       expected_amount = get_expected_amount(result.metadata)
       if result.amount != expected_amount:
           logger.warning(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—É–º–º—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_amount}, –ø–æ–ª—É—á–µ–Ω–æ {result.amount}")
           return
       
       # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂
       await process_payment(result)

2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   async def safe_send_payment(user_id, stage_id):
       try:
           await neonpay.send_payment(user_id, stage_id)
       except PaymentError as e:
           await bot.send_message(user_id, f"–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
       except Exception as e:
           logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
           await bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ ID —ç—Ç–∞–ø–æ–≤
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   # –•–æ—Ä–æ—à–æ
   neonpay.create_payment_stage("premium_monthly_subscription", stage)
   neonpay.create_payment_stage("coffee_large_size", stage)
   
   # –ü–ª–æ—Ö–æ
   neonpay.create_payment_stage("stage1", stage)
   neonpay.create_payment_stage("payment", stage)

4. –õ–æ–≥–∏—Ä—É–π—Ç–µ —Å–æ–±—ã—Ç–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   import logging
   
   logger = logging.getLogger(__name__)
   
   @neonpay.on_payment
   async def handle_payment(result):
       logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç–µ–∂: {result.user_id} –∑–∞–ø–ª–∞—Ç–∏–ª {result.amount} –∑–≤–µ–∑–¥")
       
       try:
           await process_payment(result)
           logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {result.user_id}")
       except Exception as e:
           logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {result.user_id}: {e}")

–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
-------------------------

1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   import os
   
   # –•—Ä–∞–Ω–∏—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
   BOT_TOKEN = os.getenv("BOT_TOKEN")
   WEBHOOK_URL = os.getenv("WEBHOOK_URL")
   DATABASE_URL = os.getenv("DATABASE_URL")

2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   # –ó–∞–º–µ–Ω–∏—Ç–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   import asyncpg
   
   async def save_payment(user_id: int, amount: int, stage_id: str):
       conn = await asyncpg.connect(DATABASE_URL)
       await conn.execute(
           "INSERT INTO payments (user_id, amount, stage_id, created_at) VALUES ($1, $2, $3, NOW())",
           user_id, amount, stage_id
       )
       await conn.close()

3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   import logging
   from logging.handlers import RotatingFileHandler
   
   # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   logging.basicConfig(
       level=logging.INFO,
       format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
       handlers=[
           RotatingFileHandler("bot.log", maxBytes=10*1024*1024, backupCount=5),
           logging.StreamHandler()
       ]
   )

4. –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   @router.message(Command("status"))
   async def status_command(message: Message):
       """–≠–Ω–¥–ø–æ–∏–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
       stats = neonpay.get_stats()
       status_text = (
           f"üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
           f"‚úÖ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n"
           f"üí´ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –ê–∫—Ç–∏–≤–Ω–∞\n"
           f"üîß –í–µ—Ä—Å–∏—è: 2.0\n"
           f"üìà –≠—Ç–∞–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_stages']}\n"
           f"üîÑ Callback-—Ñ—É–Ω–∫—Ü–∏–∏: {stats['registered_callbacks']}\n\n"
           f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –±–æ—Ç–∞!"
       )
       await message.answer(status_text)

5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook (–¥–ª—è Raw API)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: python

   from aiohttp import web
   
   async def webhook_handler(request):
       """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π webhook"""
       try:
           data = await request.json()
           
           # –û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
           await process_update(data)
           
           return web.Response(text="OK")
       except Exception as e:
           logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
           return web.Response(text="–û—à–∏–±–∫–∞", status=500)
   
   app = web.Application()
   app.router.add_post("/webhook", webhook_handler)

–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫
--------------------

–û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
~~~~~~~~~~~~~~~

1. "–≠—Ç–∞–ø –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"

.. code-block:: python

   # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–∞–ø
   stage = neonpay.get_payment_stage("my_stage")
   if not stage:
       print("–≠—Ç–∞–ø –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
       
   # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
   stages = neonpay.list_payment_stages()
   print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã: {list(stages.keys())}")

2. "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç"

- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç—Ç–∞–ø–∞ –ø–ª–∞—Ç–µ–∂–∞

3. Callback-—Ñ—É–Ω–∫—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç

.. code-block:: python

   # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ setup –≤—ã–∑–≤–∞–Ω
   await neonpay.setup()
   
   # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
   stats = neonpay.get_stats()
   print(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callback-—Ñ—É–Ω–∫—Ü–∏–∏: {stats['registered_callbacks']}")

–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
~~~~~~~~~~~~~

.. code-block:: python

   import logging
   
   # –í–∫–ª—é—á–∏—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   logging.basicConfig(level=logging.DEBUG)
   logging.getLogger("neonpay").setLevel(logging.DEBUG)

–ü–æ–¥–¥–µ—Ä–∂–∫–∞
---------

–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–º–æ—â–∏
~~~~~~~~~~~~~~~~~

–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:

1. üìö **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É examples –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
2. üí¨ **–°–æ–æ–±—â–µ—Å—Ç–≤–æ**: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram —Å–æ–æ–±—â–µ—Å—Ç–≤—É
3. üêõ **–ü—Ä–æ–±–ª–µ–º—ã**: –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ GitHub
4. üìß **Email**: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∞–¥—Ä–µ—Å—É support@neonpay.com
5. üí¨ **Telegram**: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @neonsahib

–†–µ—Å—É—Ä—Å—ã
~~~~~~~~

- üìñ **–ü–æ–ª–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã**: examples/ - –ì–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É –ø—Ä–∏–º–µ—Ä—ã –±–æ—Ç–æ–≤
- üîß **–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API**: API.md - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
- üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: SECURITY.md - –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- üìù **–ñ—É—Ä–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–π**: CHANGELOG.md - –ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π

–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏
~~~~~~~~~~~~~~~

- üöÄ **–ù–∞—á–∞—Ç—å**: –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –±—ã—Å—Ç—Ä–æ–º—É —Å—Ç–∞—Ä—Ç—É
- üìö **–ü—Ä–∏–º–µ—Ä—ã**: –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
- üèóÔ∏è **–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ**: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
- üêõ **–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫**: –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
