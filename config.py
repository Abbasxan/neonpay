import os
import logging
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
from pyrogram import Client
from pyrogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "7616785434:AAGqGVrd_jOf02unEBFSXNEkGrPjNAoz81w"
BOT_ID = 8147521656
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
MONGO_URI = os.getenv("MONGO_URI")
DB_NAME = os.getenv("DB_NAME")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))
ADMINS = [int(x) for x in os.getenv("ADMINS", str(OWNER_ID)).split(",")]

USERBOT_SESSION = os.getenv("USERBOT_SESSION")  # String session –¥–ª—è userbot
USERBOT_API_ID = os.getenv("USERBOT_API_ID", API_ID)  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ –∂–µ API_ID/HASH
USERBOT_API_HASH = os.getenv("USERBOT_API_HASH", API_HASH)

# –°—Å—ã–ª–∫–∏
BOT_CHANEL = os.getenv("BOT_CHANEL")
SUPPORT_CHAT = os.getenv("SUPPORT_CHAT")
SUPPORT_CHANNEL = os.getenv("SUPPORT_CHANNEL")

# üîß –ê–≤—Ç–æ—Ä –∏–¥–µ–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
DEV_ID = os.getenv("DEV_ID", "gaddar_dev")       # –ë–µ–∑ @
IDEA_ID = os.getenv("IDEA_ID", "idea_master")  # –ë–µ–∑ @


# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
LANGUAGE_PATH = os.getenv("LANGUAGE_PATH", default="langs")
DEFAULT_LANGUAGE = os.getenv("DEFAULT_LANGUAGE", default="az")

# ID –ª–æ–≥-–≥—Ä—É–ø–ø—ã
LOG_ID = int(os.getenv("LOG_ID", "0"))

REQUIRED_VARS = {
    "BOT_TOKEN": BOT_TOKEN,
    "API_ID": API_ID,
    "API_HASH": API_HASH,
    "MONGO_URI": MONGO_URI,
    "DB_NAME": DB_NAME,
    "OWNER_ID": OWNER_ID,
    "BOT_CHANEL": BOT_CHANEL,
    "SUPPORT_CHAT": SUPPORT_CHAT,
    "SUPPORT_CHANNEL": SUPPORT_CHANNEL,
    "DEV_ID": DEV_ID,
    "IDEA_ID": IDEA_ID,
    "USERBOT_SESSION": USERBOT_SESSION,
    "USERBOT_API_ID": USERBOT_API_ID,
    "USERBOT_API_HASH": USERBOT_API_HASH
}

for var, value in REQUIRED_VARS.items():
    if not value:
        raise ValueError(f"\u274c {var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s",
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DEBUG —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥—É–ª–µ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏
economy_logger = logging.getLogger('modules.economy')
economy_logger.setLevel(logging.DEBUG)

# MongoDB
try:
    client = AsyncIOMotorClient(MONGO_URI)
    db = client[DB_NAME]
    users_collection = db["users"]
    groups_collection = db["groups"]
    warnings_collection = db["warnings"]
    clones_collection = db["clones"]
    
    # –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
    currencies_collection = db["currencies"]
    balances_collection = db["balances"]
    transactions_collection = db["transactions"]
    achievements_collection = db["achievements"]
    
    # –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—á–µ—Ç–æ–≤
    activity_collection = db["activity"]
    reports_collection = db["reports"]
    
    logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
except Exception as e:
    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: {e}")
    raise


# Pyrogram Client
app = Client(
    name="nowear",
    api_id=int(API_ID),
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    parse_mode=ParseMode.HTML
)

userbot = None
if USERBOT_SESSION:
    try:
        userbot = Client(
            name="antireklam_userbot",
            api_id=int(USERBOT_API_ID),
            api_hash=USERBOT_API_HASH,
            session_string=USERBOT_SESSION,
            parse_mode=ParseMode.HTML
        )
        logging.info("‚úÖ Userbot –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è userbot –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        userbot = None
else:
    logging.warning("‚ö†Ô∏è USERBOT_SESSION –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Userbot –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
scheduler = AsyncIOScheduler()
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –≤ main.py




OTHER_BOTS = {
    "metabase": {
        "username": "metabaserobot",  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        "name": "Meta Base",  # –ö—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–Ω–∏
        "description": "ƒ∞stifad…ô√ßi adƒ±n d…ôyi≈ü…ôrs…ô bunu s…ôn…ô bildir…ôc…ôk v…ô ad d…ôyi≈üiklik tarix√ß…ôsini g√∂r…ô bil…ôc…ôks…ôn."
    },
    "neonmusic": {
        "username": "neonmuzik_bot",  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        "name": "Neon Music",  # –ö—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–Ω–∏
        "description": "Musiqi botudur, musiqi dinl…ôm…ôk √º√ß√ºn istifad…ô edil…ô bil…ôr. ƒ∞≈ül…ôm…ôsi √º√ß√ºn admin olraq qrupa …ôlav…ô et v…ô bu yetkil…ôri verm…ôyin kifay…ôtdir:Link il…ô d…ôv…ôt etm…ôk,S…ôsli s√∂hb…ôt a√ßmaq, ban yetkisin verin asistanƒ± d…ôv…ôt etm…ôkd…ôn √ß…ôtinlik √ß…ôkm…ôsin sonra bu yetkini l…ôƒüv ed…ô bil…ôrsiz."
    },
    "neonstringbot": {
        "username": "neonstringbot",  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
        "name": "String Session",  # –ö—Ä–∞—Å–∏–≤–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–Ω–∏
        "description": "Musiqi  botlarƒ± √º√ß√ºn aktiv strinq sessiyasƒ± yarada bil…ôn botdur. Pyrogram v2.0.106 v…ô Telethon v1. Qeyd bu bot qrup daxilind…ô istifad…ô √º√ß√ºn deyil gizli olduƒüu √º√ß√ºn bota start ver v…ô m…ôlumatlarƒ±nƒ± k…ônar ≈ü…ôxsl…ôrl…ô payla≈üma: @neonstringbot "
    }
    }
