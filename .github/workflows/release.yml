name: 🚀 Release Management

on:
  push:
    tags:
      - "v*.*.*"  # Semantic versioning tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.6.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if it's a prerelease
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            IS_PRERELEASE="true"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            IS_PRERELEASE="false"
          fi
          
          echo "📦 Release version: $VERSION"
          echo "🔍 Is prerelease: $IS_PRERELEASE"
          
          # Display PyPI package info
          echo "📋 PyPI Package: neonpay"
          echo "🏷️ Version: ${VERSION#v}"  # Remove 'v' prefix for PyPI
          echo "🔗 PyPI URL: https://pypi.org/project/neonpay/${VERSION#v}/"

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[all,dev]

      - name: 🧪 Run tests
        run: pytest --tb=short

      - name: 🔍 Run security scan
        run: |
          pip install bandit[toml]
          bandit -r neonpay/ -f txt

      - name: 📊 Check version consistency
        run: |
          python -c "
          import neonpay
          package_version = neonpay.__version__
          tag_version = '${{ steps.version.outputs.version }}'.lstrip('v')
          
          print(f'Package version: {package_version}')
          print(f'Tag version: {tag_version}')
          
          if package_version != tag_version:
              print('❌ Version mismatch!')
              exit(1)
          else:
              print('✅ Versions match!')
          "

      - name: 🔍 Check PyPI version
        run: |
          TAG_VERSION="${{ steps.version.outputs.version }}"
          PYPI_VERSION=$(echo "$TAG_VERSION" | sed 's/^v//')  # Remove 'v' prefix
          
          echo "🔍 Checking PyPI for version: $PYPI_VERSION"
          
          # Check if version already exists on PyPI
          if curl -s "https://pypi.org/pypi/neonpay/$PYPI_VERSION/json" | grep -q '"version"'; then
            echo "⚠️  Version $PYPI_VERSION already exists on PyPI!"
            echo "🔗 Existing PyPI URL: https://pypi.org/project/neonpay/$PYPI_VERSION/"
            
            # Get latest version from PyPI
            LATEST_VERSION=$(curl -s "https://pypi.org/pypi/neonpay/json" | python -c "
          import json, sys
          data = json.load(sys.stdin)
          versions = list(data['releases'].keys())
          versions.sort(key=lambda x: [int(i) for i in x.split('.')])
          print(versions[-1] if versions else 'No versions found')
          ")
            
            echo "📦 Latest PyPI version: $LATEST_VERSION"
            echo "📦 Our version: $PYPI_VERSION"
            
            if [ "$PYPI_VERSION" = "$LATEST_VERSION" ]; then
              echo "✅ Our version matches the latest PyPI version"
            else
              echo "ℹ️  Our version is newer than the latest PyPI version"
            fi
          else
            echo "✅ Version $PYPI_VERSION is new and ready for PyPI!"
            echo "🚀 Will be published to: https://pypi.org/project/neonpay/$PYPI_VERSION/"
          fi

  build-package:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: 📦 Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: 🏗️ Build package
        run: python -m build

      - name: 🔍 Check package
        run: twine check dist/*

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

  publish-pypi:
    name: 🚀 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    permissions:
      id-token: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: 🚀 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN || '' }}

  publish-testpypi:
    name: 🧪 Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    if: needs.validate-release.outputs.is_prerelease == 'true'
    permissions:
      id-token: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: 🧪 Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN || '' }}
          repository-url: https://test.pypi.org/legacy/

  create-github-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-package]
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: 📝 Generate release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PYPI_VERSION=$(echo "$VERSION" | sed 's/^v//')  # Remove 'v' prefix
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"- %s" --max-count=20)
          fi
          
          echo "# 🚀 Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "## 📦 PyPI Package Information" >> release_notes.md
          echo "" >> release_notes.md
          echo "| Field | Value |" >> release_notes.md
          echo "|-------|-------|" >> release_notes.md
          echo "| 📋 **Package** | \`neonpay\` |" >> release_notes.md
          echo "| 🏷️ **Version** | \`$PYPI_VERSION\` |" >> release_notes.md
          echo "| 🔗 **PyPI URL** | [https://pypi.org/project/neonpay/$PYPI_VERSION/](https://pypi.org/project/neonpay/$PYPI_VERSION/) |" >> release_notes.md
          echo "| 📈 **Downloads** | [PyPI Stats](https://pypistats.org/packages/neonpay) |" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📋 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install neonpay==$PYPI_VERSION" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 📦 What's New" >> release_notes.md
          echo "" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          echo "" >> release_notes.md
          echo "## 🔗 Links" >> release_notes.md
          echo "" >> release_notes.md
          echo "- 📚 **Documentation**: [GitHub README](https://github.com/${{ github.repository }})" >> release_notes.md
          echo "- 🐛 **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)" >> release_notes.md
          echo "- 💬 **Discussions**: [GitHub Discussions](https://github.com/${{ github.repository }}/discussions)" >> release_notes.md
          
          cat release_notes.md

      - name: 🏷️ Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: release_notes.md
          files: dist/*
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          generate_release_notes: true

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always()
    
    steps:
      - name: ✅ Success notification
        if: needs.create-github-release.result == 'success'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PYPI_VERSION=$(echo "$VERSION" | sed 's/^v//')  # Remove 'v' prefix
          
          echo "🎉 Release $VERSION published successfully!"
          echo ""
          echo "📦 PyPI Package Information:"
          echo "  📋 Package: neonpay"
          echo "  🏷️ Version: $PYPI_VERSION"
          echo "  🔗 PyPI URL: https://pypi.org/project/neonpay/$PYPI_VERSION/"
          echo "  📥 Install: pip install neonpay==$PYPI_VERSION"
          echo ""
          echo "🏷️ GitHub Release:"
          echo "  🔗 URL: https://github.com/${{ github.repository }}/releases/tag/$VERSION"
          echo ""
          echo "📊 Package Stats:"
          echo "  📈 Downloads: https://pypistats.org/packages/neonpay"
          echo "  📚 Documentation: https://pypi.org/project/neonpay/$PYPI_VERSION/#description"

      - name: ❌ Failure notification
        if: needs.create-github-release.result == 'failure'
        run: |
          echo "❌ Release ${{ needs.validate-release.outputs.version }} failed!"
          echo "Please check the logs for details."
          exit 1
