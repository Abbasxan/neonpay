name: 🚀 Modern CI/CD Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  schedule:
    - cron: '0 2 * * 1'

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # 🔧 Code Formatting & Quality
  format:
    name: 🎨 Code Formatting
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 💾 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff pytest-cov coverage[toml] bandit[toml] safety pip-audit \
                      pytest-benchmark memory-profiler

      - name: 🎨 Run Black auto-format
        run: black .

      - name: 📋 Run isort auto-format
        run: isort .

      - name: 🔍 Run Ruff auto-fix
        run: ruff check --fix .

      - name: 🧹 Cleanup cache files
        run: python .github/scripts/cleanup.py || echo "Cleanup script failed"

      - name: 📝 Update README version
        run: python .github/scripts/update_readme_version.py || echo "Version update failed"

  # 🧪 CI Tests
  ci:
    name: 🧪 CI Tests
    runs-on: ubuntu-latest
    needs: format
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: pip install -e .[all,dev]

      - name: 🔍 Check syntax
        run: python -m compileall -q .

      - name: 🧹 Linting
        run: ruff check . --output-format=github

      - name: 🎨 Black formatting check
        run: black --check --diff .

      - name: 📋 isort imports check
        run: isort --check-only --diff .

      - name: 🔍 MyPy type checking
        run: mypy --show-error-codes --show-error-context --pretty neonpay

      - name: 🧪 Run tests with coverage
        run: |
          pytest --cov=neonpay --cov-report=xml --cov-report=html --cov-report=term-missing \
                 --junitxml=pytest-results.xml --tb=short -v

      - name: 📊 Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: neonpay-coverage
          fail_ci_if_error: false

      - name: 📈 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml

  # 🔒 Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: format
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Run security tools
        run: |
          bandit -r neonpay/ -f json -o bandit-report.json || true
          bandit -r neonpay/ -f txt
          safety check --json --output safety-report.json || true
          safety check
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit

      - name: 📊 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  # 🌍 Multi-platform Tests
  multiplatform:
    name: 🌍 Multi-platform Tests
    runs-on: ${{ matrix.os }}
    needs: format
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
        exclude:
          - os: windows-latest
            python-version: "3.12"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install -e .[all,dev] ruff
      - run: pytest --tb=short -v

  # ⚡ Performance & Benchmarks
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: format
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - run: pip install -e .[all,dev] pytest-benchmark memory-profiler
      - run: pytest tests/ -k "benchmark" --benchmark-only --benchmark-save=main || echo "No benchmark tests found"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: benchmark-results
          path: .benchmarks/

  # 📢 Notifications
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [ci, security, multiplatform]
    if: always()
    steps:
      - name: ✅ Success notification
        if: needs.ci.result == 'success' && needs.security.result == 'success' && needs.multiplatform.result == 'success'
        run: |
          echo "🎉 All CI checks passed successfully!"
          echo "✅ Tests: ${{ needs.ci.result }}"
          echo "✅ Security: ${{ needs.security.result }}"
          echo "✅ Multi-platform: ${{ needs.multiplatform.result }}"

      - name: ❌ Failure notification
        if: needs.ci.result == 'failure' || needs.security.result == 'failure' || needs.multiplatform.result == 'failure'
        run: |
          echo "❌ CI checks failed!"
          echo "🧪 Tests: ${{ needs.ci.result }}"
          echo "🔒 Security: ${{ needs.security.result }}"
          echo "🌍 Multi-platform: ${{ needs.multiplatform.result }}"
          exit 1
