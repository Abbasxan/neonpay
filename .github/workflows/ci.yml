name: 🚀 Modern CI/CD Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scans on Mondays at 2 AM UTC

env:
  PYTHON_VERSION: "3.11"
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # 🔧 Code Formatting & Quality
  format:
    name: 🎨 Code Formatting
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 💾 Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-format-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-format-
            ${{ runner.os }}-pip-

      - name: 📦 Install formatting tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff

      - name: 🎨 Run Black auto-format
        run: black .

      - name: 📋 Run isort auto-format
        run: isort .

      - name: 🔍 Run Ruff auto-fix
        run: |
          python -m pip install --upgrade pip
          pip install ruff
          ruff check --fix .

      - name: 🧹 Cleanup cache files
        run: |
          python .github/scripts/cleanup.py || echo "Cleanup script failed, continuing..."

      - name: 📝 Update README version
        run: |
          python .github/scripts/update_readme_version.py || echo "Version update script failed, continuing..."

      - name: 💾 Commit formatting changes
        run: |
          git config --global user.name "🤖 GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No formatting changes to commit"
          else
            git commit -m "🎨 Auto-format code with black, isort, and ruff

            - Applied Black formatting
            - Applied isort import sorting  
            - Applied Ruff linting fixes
            - Cleaned up cache files and temporary data
            - Updated README version information
            
            [skip ci]"
            git push
          fi

# 🧪 Main CI Pipeline
ci:
  name: 🧪 CI Tests
  runs-on: ubuntu-latest
  needs: format
  strategy:
    matrix:
      python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
      include:
        - python-version: "3.11"
          test-group: "all"
        - python-version: "3.9"
          test-group: "minimal"
        - python-version: "3.12"
          test-group: "latest"

  steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 💾 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all,dev]
        pip install pytest-cov coverage[toml] bandit[toml] safety ruff

    - name: 🔍 Check syntax (py_compile)
      run: python -m compileall -q .

    - name: 🧹 Run Ruff linting
      run: |
        python -m pip install --upgrade pip
        pip install ruff
        ruff check . --output-format=github

    - name: 🎨 Check Black formatting
      run: black --check --diff .

    - name: 📋 Check isort imports
      run: isort --check-only --diff .

    - name: 🔍 Run MyPy type checking
      run: mypy --show-error-codes --show-error-context --pretty neonpay

    - name: 🧪 Run tests with coverage
      run: |
        pytest --cov=neonpay --cov-report=xml --cov-report=html --cov-report=term-missing \
               --junitxml=pytest-results.xml --tb=short -v

    - name: 📊 Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: neonpay-coverage
        fail_ci_if_error: false

    - name: 📈 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
          coverage.xml

# 🔒 Security Scanning
security:
  name: 🔒 Security Scan
  runs-on: ubuntu-latest
  needs: format
  steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-
          ${{ runner.os }}-pip-

    - name: 📦 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit

    - name: 🔍 Run Bandit security linter
      run: |
        bandit -r neonpay/ -f json -o bandit-report.json || true
        bandit -r neonpay/ -f txt

    - name: 🛡️ Run Safety vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: 🔍 Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit

    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

# 🌍 Multi-platform Testing
multiplatform:
  name: 🌍 Multi-platform Tests
  runs-on: ${{ matrix.os }}
  needs: format
  strategy:
    matrix:
      os: [ubuntu-latest, windows-latest, macos-latest]
      python-version: ["3.11", "3.12"]
      exclude:
        - os: windows-latest
          python-version: "3.12"  # Reduce Windows 3.12 tests

  steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: 💾 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all,dev]
        pip install ruff  # на всякий случай, если понадобится

    - name: 🧪 Run platform-specific tests
      run: pytest --tb=short -v

# 📊 Performance & Benchmarks
performance:
  name: ⚡ Performance Tests
  runs-on: ubuntu-latest
  needs: format
  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.PIP_CACHE_DIR }}
        key: ${{ runner.os }}-pip-perf-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-perf-
          ${{ runner.os }}-pip-

    - name: 📦 Install performance tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all,dev]
        pip install pytest-benchmark memory-profiler

    - name: ⚡ Run performance benchmarks
      run: |
        pytest tests/ -k "benchmark" --benchmark-only --benchmark-save=main || echo "No benchmark tests found"

    - name: 📊 Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: .benchmarks/

# 🚨 Notifications
notify:
  name: 📢 Notifications
  runs-on: ubuntu-latest
  needs: [ci, security, multiplatform]
  if: always()
  steps:
    - name: ✅ Success notification
      if: needs.ci.result == 'success' && needs.security.result == 'success' && needs.multiplatform.result == 'success'
      run: |
        echo "🎉 All CI checks passed successfully!"
        echo "✅ Tests: ${{ needs.ci.result }}"
        echo "✅ Security: ${{ needs.security.result }}"
        echo "✅ Multi-platform: ${{ needs.multiplatform.result }}"

    - name: ❌ Failure notification
      if: needs.ci.result == 'failure' || needs.security.result == 'failure' || needs.multiplatform.result == 'failure'
      run: |
        echo "❌ CI checks failed!"
        echo "🧪 Tests: ${{ needs.ci.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "🌍 Multi-platform: ${{ needs.multiplatform.result }}"
        exit 1
