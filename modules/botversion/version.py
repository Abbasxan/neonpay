"""
Developer Version Module
–ú–æ–¥—É–ª—å –≤–µ—Ä—Å–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
"""

import logging
import os
import glob
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from config import app
from language import load_language, get_group_language

logger = logging.getLogger(__name__)

class DeveloperVersionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    
    def __init__(self):
        self.version_folder = "modules/botversion/versions"
    
    async def show_version(self, client: Client, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
        chat_id = message.chat.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
        versions = await self.get_all_versions()
        latest_version = await self.get_latest_version()
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üìã {lang.get('version_changelog', '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')}",
                    callback_data=f"version_changelog_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üîÑ {lang.get('version_check_updates', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')}",
                    callback_data=f"version_check_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üè∑Ô∏è <b>{lang.get('version_title', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏')}</b>

üì± <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:</b> <code>{latest_version}</code>
üìä <b>–í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π:</b> {len(versions)}
üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> QEDDAR Team
üìÅ <b>–ü–∞–ø–∫–∞ –≤–µ—Ä—Å–∏–π:</b> <code>{self.version_folder}</code>

üí° <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>
        """
        
        await message.reply(text, reply_markup=keyboard)
    
    async def show_version_from_callback(self, client: Client, callback_query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏–∑ callback –∑–∞–ø—Ä–æ—Å–∞"""
        chat_id = callback_query.message.chat.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
        versions = await self.get_all_versions()
        latest_version = await self.get_latest_version()
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üìã {lang.get('version_changelog', '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')}",
                    callback_data=f"version_changelog_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üîÑ {lang.get('version_check_updates', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')}",
                    callback_data=f"version_check_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üè∑Ô∏è <b>{lang.get('version_title', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏')}</b>

üì± <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:</b> <code>{latest_version}</code>
üìä <b>–í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π:</b> {len(versions)}
üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> QEDDAR Team
üìÅ <b>–ü–∞–ø–∫–∞ –≤–µ—Ä—Å–∏–π:</b> <code>{self.version_folder}</code>

üí° <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>
        """
        
        try:
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing version message: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏!", show_alert=True)
    
    async def show_changelog(self, client: Client, callback_query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        chat_id = callback_query.message.chat.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏
        versions = await self.get_all_versions()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ (–º–∞–∫—Å–∏–º—É–º 8 –≤ —Ä—è–¥)
        keyboard_buttons = []
        for i, version_file in enumerate(versions):
            version_name = version_file.replace('.txt', '').replace('ver', '')
            keyboard_buttons.append(
                InlineKeyboardButton(
                    version_name,
                    callback_data=f"version_detail_{version_name}_{chat_id}"
                )
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
        keyboard_rows = []
        for i in range(0, len(keyboard_buttons), 4):
            keyboard_rows.append(keyboard_buttons[i:i+4])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_rows.append([
            InlineKeyboardButton(
                f"üîô {lang.get('version_back', '–ù–∞–∑–∞–¥')}",
                callback_data=f"version_back_{chat_id}"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(keyboard_rows)
        
        text = f"""
üìã <b>{lang.get('version_changelog_title', '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')}</b>

üìä <b>–í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π:</b> {len(versions)}

üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:</b>
        """
        
        try:
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing changelog message: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π!", show_alert=True)
    
    async def show_version_detail(self, client: Client, callback_query, version_name: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        chat_id = callback_query.message.chat.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏
        version_file = f"ver{version_name}.txt"
        content = await self.read_version_file(version_file)
        
        if not content:
            await callback_query.answer("–§–∞–π–ª –≤–µ—Ä—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('version_back', '–ù–∞–∑–∞–¥')}",
                    callback_data=f"version_changelog_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üìã <b>–î–µ—Ç–∞–ª–∏ –≤–µ—Ä—Å–∏–∏ {version_name}</b>

{content}
        """
        
        try:
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing version detail message: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –≤–µ—Ä—Å–∏–∏!", show_alert=True)
    
    async def check_updates(self, client: Client, callback_query):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        chat_id = callback_query.message.chat.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏
        versions = await self.get_all_versions()
        latest_version = await self.get_latest_version()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ—Ä—Å–∏—è–º
        keyboard_buttons = []
        for i, version_file in enumerate(versions[:6]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –≤–µ—Ä—Å–∏–π
            version_name = version_file.replace('.txt', '').replace('ver', '')
            keyboard_buttons.append(
                InlineKeyboardButton(
                    version_name,
                    callback_data=f"version_detail_{version_name}_{chat_id}"
                )
            )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥)
        keyboard_rows = []
        for i in range(0, len(keyboard_buttons), 3):
            keyboard_rows.append(keyboard_buttons[i:i+3])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard_rows.append([
            InlineKeyboardButton(
                f"üìã {lang.get('version_changelog', '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π')}",
                callback_data=f"version_changelog_{chat_id}"
            )
        ])
        keyboard_rows.append([
            InlineKeyboardButton(
                f"üîô {lang.get('version_back', '–ù–∞–∑–∞–¥')}",
                callback_data=f"version_back_{chat_id}"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(keyboard_rows)
        
        text = f"""
üîÑ <b>{lang.get('version_updates_title', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π')}</b>

üì± <b>–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è:</b> <code>{latest_version}</code>
üìä <b>–í—Å–µ–≥–æ –≤–µ—Ä—Å–∏–π:</b> {len(versions)}
üìÖ <b>–î–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí° <b>–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–µ—Ä—Å–∏—è–º:</b>
        """
        
        try:
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"Error editing updates message: {e}")
            await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!", show_alert=True)
    
    async def get_all_versions(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤–µ—Ä—Å–∏–π"""
        try:
            pattern = os.path.join(self.version_folder, "ver*.txt")
            version_files = glob.glob(pattern)
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–≤–µ—Ä—Å–∏–∏)
            version_files.sort(reverse=True)
            return [os.path.basename(f) for f in version_files]
        except Exception as e:
            logger.error(f"Error getting all versions: {e}")
            return []
    
    async def get_latest_version(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é"""
        try:
            versions = await self.get_all_versions()
            if versions:
                latest_file = versions[0]
                return latest_file.replace('ver', '').replace('.txt', '')
            return "1.0.0"
        except Exception as e:
            logger.error(f"Error getting latest version: {e}")
            return "1.0.0"
    
    async def read_version_file(self, filename):
        """–ß–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏"""
        try:
            file_path = os.path.join(self.version_folder, filename)
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    return f.read().strip()
            return None
        except Exception as e:
            logger.error(f"Error reading version file {filename}: {e}")
            return None
    
    async def handle_callback(self, client: Client, callback_query):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback_query.data
        chat_id = callback_query.message.chat.id
        
        try:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
            await callback_query.answer()
            
            if data.startswith("version_changelog_"):
                await self.show_changelog(client, callback_query)
            elif data.startswith("version_check_"):
                await self.check_updates(client, callback_query)
            elif data.startswith("version_detail_"):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ callback_data
                parts = data.split("_")
                if len(parts) >= 3:
                    version_name = parts[2]
                    await self.show_version_detail(client, callback_query, version_name)
            elif data.startswith("version_back_"):
                await self.show_version_from_callback(client, callback_query)
        except Exception as e:
            logger.error(f"Error in version callback handler: {e}")
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
version_manager = DeveloperVersionManager()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–µ—Ä—Å–∏–∏
@app.on_message(filters.command("version") & filters.group, group=15)
async def version_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–µ—Ä—Å–∏–∏"""
    await version_manager.show_version(client, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@app.on_callback_query(filters.regex("^version_"), group=15)
async def version_callback_handler(client: Client, callback_query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–µ—Ä—Å–∏–π"""
    try:
        await version_manager.handle_callback(client, callback_query)
    except Exception as e:
        logger.error(f"Error in version callback handler: {e}")
        try:
            await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
        except:
            pass
