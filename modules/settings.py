import logging
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.enums import ChatMemberStatus
from config import app, db
from language import load_language, get_group_language, get_user_language

logger = logging.getLogger(__name__)

def create_main_settings_keyboard(lang):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton(f"üõ° {lang.get('antispam_title', 'AntiSpam')}", callback_data="settings_antispam"),
            InlineKeyboardButton(f"üö´ {lang.get('antireklam_title', 'AntiReklam')}", callback_data="settings_antireklam")
        ],
        [
            InlineKeyboardButton(f"ü§¨ {lang.get('antivulgar_title', 'AntiVulgar')}", callback_data="settings_antivulgar"),
            InlineKeyboardButton(f"üåä {lang.get('antiflood_title', 'AntiFlood')}", callback_data="settings_antiflood")
        ],
        [
            InlineKeyboardButton(f"ü§ñ {lang.get('antispammer_title', 'AntiSpammer')}", callback_data="settings_antispammer"),
            InlineKeyboardButton(f"üîê {lang.get('captcha_title', 'Captcha')}", callback_data="settings_captcha")
        ],
        [
            InlineKeyboardButton(f"üìä {lang.get('view_all_status', 'B√ºt√ºn statuslar')}", callback_data="settings_status_all")
        ]
    ])

def create_module_keyboard(module_name, is_enabled, lang):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    status_text = lang.get('enabled', 'Aktiv') if is_enabled else lang.get('disabled', 'Deaktiv')
    toggle_text = lang.get('disable', 'Deaktiv et') if is_enabled else lang.get('enable', 'Aktiv et')
    
    keyboard = [
        [InlineKeyboardButton(f"üìä Status: {status_text}", callback_data=f"settings_{module_name}_status")],
        [InlineKeyboardButton(f"üîÑ {toggle_text}", callback_data=f"settings_{module_name}_toggle")],
        [InlineKeyboardButton(f"‚öôÔ∏è {lang.get('configure', 'T…ônziml…ô')}", callback_data=f"settings_{module_name}_config")],
        [InlineKeyboardButton(f"‚óÄÔ∏è {lang.get('back', 'Geri')}", callback_data="settings_main")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

def create_config_keyboard(module_name, lang):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    keyboards = {
        "antispam": [
            [InlineKeyboardButton("üìä Limit: 5 mesaj", callback_data=f"config_{module_name}_limit")],
            [InlineKeyboardButton("‚è± Vaxt: 60 saniy…ô", callback_data=f"config_{module_name}_time")],
            [InlineKeyboardButton("‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")]
        ],
        "antiflood": [
            [InlineKeyboardButton("üìä Limit: 10 mesaj", callback_data=f"config_{module_name}_limit")],
            [InlineKeyboardButton("‚è± Vaxt: 10 saniy…ô", callback_data=f"config_{module_name}_time")],
            [InlineKeyboardButton("‚ö° H…ôr…ôk…ôt: Sil", callback_data=f"config_{module_name}_action")],
            [InlineKeyboardButton("‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")]
        ],
        "antivulgar": [
            [InlineKeyboardButton("üìä Limit: 3 x…ôb…ôrdarlƒ±q", callback_data=f"config_{module_name}_limit")],
            [InlineKeyboardButton("‚è± Vaxt: 60 saniy…ô", callback_data=f"config_{module_name}_time")],
            [InlineKeyboardButton("üîá Mute rejimi: OFF", callback_data=f"config_{module_name}_mute")],
            [InlineKeyboardButton("‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")]
        ],
        "antireklam": [
            [InlineKeyboardButton("ü§ñ Userbot: Aktiv", callback_data=f"config_{module_name}_userbot")],
            [InlineKeyboardButton("‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")]
        ],
        "captcha": [
            [InlineKeyboardButton("‚è∞ Vaxt limiti: 300 saniy…ô", callback_data=f"config_{module_name}_timeout")],
            [InlineKeyboardButton("‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")]
        ]
    }
    
    return InlineKeyboardMarkup(keyboards.get(module_name, [[InlineKeyboardButton("‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")]]))

async def get_module_status(chat_id, module_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    group_data = await db.groups.find_one({"_id": chat_id}) or {}
    
    status_map = {
        "antispam": group_data.get("antispam_enabled", True),
        "antireklam": group_data.get("antireklam_enabled", True),
        "antivulgar": group_data.get("antivulgar_enabled", True),
        "antiflood": group_data.get("antiflood_enabled", False),
        "antispammer": True,  # antispammer –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω
        "captcha": group_data.get("captcha_enabled", False)
    }
    
    return status_map.get(module_name, False)

async def toggle_module_status(chat_id, module_name):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
    current_status = await get_module_status(chat_id, module_name)
    new_status = not current_status
    
    field_map = {
        "antispam": "antispam_enabled",
        "antireklam": "antireklam_enabled", 
        "antivulgar": "antivulgar_enabled",
        "antiflood": "antiflood_enabled",
        "captcha": "captcha_enabled"
    }
    
    if module_name in field_map:
        await db.groups.update_one(
            {"_id": chat_id},
            {"$set": {field_map[module_name]: new_status}},
            upsert=True
        )
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è antireklam
        if module_name == "antireklam" and new_status:
            from modules.antireklam import invite_userbot_to_group
            from config import userbot
            if userbot and userbot.is_connected:
                await invite_userbot_to_group(chat_id)
    
    return new_status

async def get_module_config(chat_id, module_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è"""
    group_data = await db.groups.find_one({"_id": chat_id}) or {}
    
    configs = {
        "antispam": {
            "limit": group_data.get("antispam_limit", 5),
            "time": group_data.get("antispam_time", 60)
        },
        "antiflood": {
            "limit": group_data.get("antiflood_limit", 10),
            "time": group_data.get("antiflood_time", 10),
            "action": group_data.get("antiflood_action", "delete")
        },
        "antivulgar": {
            "limit": group_data.get("antivulgar_limit", 3),
            "time": group_data.get("antivulgar_time", 60),
            "mute": group_data.get("antivulgar_mute", False)
        },
        "antireklam": {
            "userbot": group_data.get("antireklam_userbot", True)
        },
        "captcha": {
            "timeout": group_data.get("captcha_timeout", 300)
        }
    }
    
    return configs.get(module_name, {})

async def update_module_config(chat_id, module_name, config_key, new_value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è"""
    field_name = f"{module_name}_{config_key}"
    await db.groups.update_one(
        {"_id": chat_id},
        {"$set": {field_name: new_value}},
        upsert=True
    )

@app.on_message(filters.command("settings") & filters.group, group=-1)
async def settings_command(client: Client, message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not message.from_user:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await app.get_chat_member(chat_id, user_id)
        is_admin = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception:
        return await message.reply("Admin statusunu yoxlaya bilm…ôdim.")
    
    if not is_admin:
        return await message.reply("Bu …ômri yalnƒ±z adminl…ôr istifad…ô ed…ô bil…ôr.")
    
    lang_code = await get_group_language(chat_id)
    lang = load_language(lang_code)
    
    text = f"<blockquote>‚öôÔ∏è <b>{lang.get('settings_title', 'Qrup T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
           f"{lang.get('settings_description', 'A≈üaƒüƒ±dakƒ± d√ºym…ôl…ôrd…ôn istifad…ô ed…ôr…ôk modullarƒ± idar…ô edin:')}</blockquote>"
    
    keyboard = create_main_settings_keyboard(lang)
    
    await message.reply(text, reply_markup=keyboard)

@app.on_callback_query(filters.regex(r"^settings_"))
async def settings_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not callback_query.from_user:
        return
    
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await app.get_chat_member(chat_id, user_id)
        is_admin = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception:
        return await callback_query.answer("Admin statusunu yoxlaya bilm…ôdim.", show_alert=True)
    
    if not is_admin:
        return await callback_query.answer("Bu funksiya yalnƒ±z adminl…ôr √º√ß√ºnd√ºr.", show_alert=True)
    
    lang_code = await get_group_language(chat_id)
    lang = load_language(lang_code)
    
    try:
        if data == "settings_main":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            text = f"<blockquote>‚öôÔ∏è <b>{lang.get('settings_title', 'Qrup T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
                   f"{lang.get('settings_description', 'A≈üaƒüƒ±dakƒ± d√ºym…ôl…ôrd…ôn istifad…ô ed…ôr…ôk modullarƒ± idar…ô edin:')}</blockquote>"
            keyboard = create_main_settings_keyboard(lang)
            
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        elif data == "settings_status_all":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
            group_data = await db.groups.find_one({"_id": chat_id}) or {}
            
            antispam_status = "‚úÖ" if group_data.get("antispam_enabled", True) else "‚ùå"
            antireklam_status = "‚úÖ" if group_data.get("antireklam_enabled", True) else "‚ùå"
            antivulgar_status = "‚úÖ" if group_data.get("antivulgar_enabled", True) else "‚ùå"
            antiflood_status = "‚úÖ" if group_data.get("antiflood_enabled", False) else "‚ùå"
            captcha_status = "‚úÖ" if group_data.get("captcha_enabled", False) else "‚ùå"
            
            text = f"<blockquote>üìä <b>{lang.get('all_modules_status', 'B√ºt√ºn Modullarƒ±n Statusu')}</b>\n\n" \
                   f"üõ° AntiSpam: {antispam_status}\n" \
                   f"üö´ AntiReklam: {antireklam_status}\n" \
                   f"ü§¨ AntiVulgar: {antivulgar_status}\n" \
                   f"üåä AntiFlood: {antiflood_status}\n" \
                   f"üîê Captcha: {captcha_status}\n" \
                   f"ü§ñ AntiSpammer: ‚úÖ ({lang.get('antispammer_always_active', 'h…ômi≈ü…ô aktiv')})</blockquote>"
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton(f"‚óÄÔ∏è {lang.get('back', 'Geri')}", callback_data="settings_main")
            ]])
            
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        elif data.startswith("settings_") and not data.endswith(("_toggle", "_status", "_config")):
            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–æ–¥—É–ª—è
            module_name = data.replace("settings_", "")
            is_enabled = await get_module_status(chat_id, module_name)
            
            module_titles = {
                "antispam": "üõ° AntiSpam",
                "antireklam": "üö´ AntiReklam", 
                "antivulgar": "ü§¨ AntiVulgar",
                "antiflood": "üåä AntiFlood",
                "antispammer": "ü§ñ AntiSpammer",
                "captcha": "üîê Captcha"
            }
            
            title = module_titles.get(module_name, module_name.title())
            status_text = lang.get('enabled', 'Aktiv') if is_enabled else lang.get('disabled', 'Deaktiv')
            
            text = f"<blockquote>‚öôÔ∏è <b>{title} {lang.get('module_settings_title', 'T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
                   f"üìä Status: {status_text}\n\n" \
                   f"{lang.get('module_description_' + module_name, 'Bu modul qrupunuzu qoruyur.')}</blockquote>"
            
            keyboard = create_module_keyboard(module_name, is_enabled, lang)
            
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        elif data.endswith("_toggle"):
            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
            module_name = data.replace("settings_", "").replace("_toggle", "")
            
            if module_name == "antispammer":
                await callback_query.answer("AntiSpammer h…ômi≈ü…ô aktivdir v…ô deaktiv edil…ô bilm…ôz.", show_alert=True)
                return
            
            new_status = await toggle_module_status(chat_id, module_name)
            status_text = lang.get('enabled', 'Aktiv') if new_status else lang.get('disabled', 'Deaktiv')
            
            await callback_query.answer(f"‚úÖ {module_name.title()} {status_text.lower()} edildi!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            module_titles = {
                "antispam": "üõ° AntiSpam",
                "antireklam": "üö´ AntiReklam",
                "antivulgar": "ü§¨ AntiVulgar", 
                "antiflood": "üåä AntiFlood",
                "captcha": "üîê Captcha"
            }
            
            title = module_titles.get(module_name, module_name.title())
            
            text = f"<blockquote>‚öôÔ∏è <b>{title} {lang.get('module_settings_title', 'T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
                   f"üìä Status: {status_text}\n\n" \
                   f"{lang.get('module_description_' + module_name, 'Bu modul qrupunuzu qoruyur.')}</blockquote>"
            
            keyboard = create_module_keyboard(module_name, new_status, lang)
            
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        elif data.endswith("_config"):
            module_name = data.replace("settings_", "").replace("_config", "")
            
            if module_name == "antispammer":
                text = f"<blockquote>‚öôÔ∏è <b>AntiSpammer {lang.get('module_settings_title', 'T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
                       f"ü§ñ {lang.get('antispammer_auto_works', 'AntiSpammer avtomatik i≈ül…ôyir v…ô …ôlav…ô t…ônziml…ôm…ô t…ôl…ôb etmir.')}\n" \
                       f"{lang.get('antispammer_detects', 'Bu modul spam botlarƒ± v…ô ≈ü√ºbh…ôli hesablarƒ± avtomatik a≈ükar edir.')}</blockquote>"
                
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton(f"‚óÄÔ∏è Geri", callback_data=f"settings_{module_name}")
                ]])
            else:
                config = await get_module_config(chat_id, module_name)
                
                config_texts = {
                    "antispam": f"üìä {lang.get('config_limit', 'Limit')}: {config.get('limit', 5)} {lang.get('config_messages', 'mesaj')}\n‚è± {lang.get('config_time', 'Vaxt')}: {config.get('time', 60)} {lang.get('config_seconds', 'saniy…ô')}",
                    "antiflood": f"üìä {lang.get('config_limit', 'Limit')}: {config.get('limit', 10)} {lang.get('config_messages', 'mesaj')}\n‚è± {lang.get('config_time', 'Vaxt')}: {config.get('time', 10)} {lang.get('config_seconds', 'saniy…ô')}\n‚ö° {lang.get('config_action', 'H…ôr…ôk…ôt')}: {config.get('action', 'delete').title()}",
                    "antivulgar": f"üìä {lang.get('config_limit', 'Limit')}: {config.get('limit', 3)} {lang.get('config_warnings', 'x…ôb…ôrdarlƒ±q')}\n‚è± {lang.get('config_time', 'Vaxt')}: {config.get('time', 60)} {lang.get('config_seconds', 'saniy…ô')}\nüîá {lang.get('config_mute', 'Mute')}: {lang.get('enabled', 'Aktiv') if config.get('mute', False) else lang.get('disabled', 'Deaktiv')}",
                    "antireklam": f"ü§ñ {lang.get('config_works_with_userbot', 'Userbot il…ô i≈ül…ôyir')}\nüîó {lang.get('config_auto_deletes_ads', 'Reklam linkl…ôrini avtomatik silir')}",
                    "captcha": f"‚è∞ {lang.get('config_timeout', 'Vaxt limiti')}: {config.get('timeout', 300)} {lang.get('config_seconds', 'saniy…ô')}\nüîê {lang.get('config_math_problem', 'Yeni √ºzvl…ôr √º√ß√ºn riyazi m…ôs…ôl…ô')}"
                }

                text = f"<blockquote>‚öôÔ∏è <b>{module_name.title()} {lang.get('module_settings_title', 'T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
                       f"{config_texts.get(module_name, lang.get('config_not_available', 'T…ônziml…ôm…ô m√∂vcud deyil'))}\n\n" \
                       f"{lang.get('configure_with_buttons', 'A≈üaƒüƒ±dakƒ± d√ºym…ôl…ôrl…ô t…ônziml…ôyin:')}</blockquote>"
                
                keyboard = create_config_keyboard(module_name, lang)
            
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Settings callback error: {e}")
        await callback_query.answer("X…ôta ba≈ü verdi!", show_alert=True)

@app.on_callback_query(filters.regex(r"^config_"))
async def config_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª–µ–π"""
    if not callback_query.from_user:
        return
    
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await app.get_chat_member(chat_id, user_id)
        is_admin = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception:
        return await callback_query.answer("Admin statusunu yoxlaya bilm…ôdim.", show_alert=True)
    
    if not is_admin:
        return await callback_query.answer("Bu funksiya yalnƒ±z adminl…ôr √º√ß√ºnd√ºr.", show_alert=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    chat = callback_query.message.chat
    if chat.type == "private":
        # –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang_code = await get_user_language(callback_query.from_user.id)
    else:
        # –î–ª—è –≥—Ä—É–ø–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã
        lang_code = await get_group_language(chat.id)
    lang = load_language(lang_code)
    
    try:
        parts = data.split("_")
        module_name = parts[1]
        config_type = parts[2]
        
        config = await get_module_config(chat_id, module_name)
        
        if config_type == "limit":
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            current_limit = config.get('limit', 5)
            limits = [3, 5, 10, 15, 20] if module_name != "antiflood" else [5, 10, 15, 20, 25]
            
            try:
                current_index = limits.index(current_limit)
                new_limit = limits[(current_index + 1) % len(limits)]
            except ValueError:
                new_limit = limits[0]
            
            await update_module_config(chat_id, module_name, "limit", new_limit)
            await callback_query.answer(f"‚úÖ Limit {new_limit} olaraq t…ôyin edildi!")
            
        elif config_type == "time":
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            current_time = config.get('time', 60)
            times = [10, 30, 60, 120, 300]
            
            try:
                current_index = times.index(current_time)
                new_time = times[(current_index + 1) % len(times)]
            except ValueError:
                new_time = times[0]
            
            await update_module_config(chat_id, module_name, "time", new_time)
            await callback_query.answer(f"‚úÖ Vaxt {new_time} saniy…ô olaraq t…ôyin edildi!")
            
        elif config_type == "action" and module_name == "antiflood":
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è antiflood
            current_action = config.get('action', 'delete')
            actions = ['delete', 'warn', 'mute']
            
            try:
                current_index = actions.index(current_action)
                new_action = actions[(current_index + 1) % len(actions)]
            except ValueError:
                new_action = actions[0]
            
            await update_module_config(chat_id, module_name, "action", new_action)
            await callback_query.answer(f"‚úÖ H…ôr…ôk…ôt {new_action} olaraq t…ôyin edildi!")
            
        elif config_type == "mute" and module_name == "antivulgar":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –º—É—Ç–∞
            current_mute = config.get('mute', False)
            new_mute = not current_mute
            
            await update_module_config(chat_id, module_name, "mute", new_mute)
            status = "aktiv" if new_mute else "deaktiv"
            await callback_query.answer(f"‚úÖ Mute rejimi {status} edildi!")
        
        elif config_type == "timeout" and module_name == "captcha":
            # –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è captcha
            current_timeout = config.get('timeout', 300)
            timeouts = [60, 120, 300, 600]  # 1, 2, 5, 10 –º–∏–Ω—É—Ç
            
            try:
                current_index = timeouts.index(current_timeout)
                new_timeout = timeouts[(current_index + 1) % len(timeouts)]
            except ValueError:
                new_timeout = timeouts[0]
            
            await update_module_config(chat_id, module_name, "timeout", new_timeout)
            await callback_query.answer(f"‚úÖ Vaxt limiti {new_timeout} saniy…ô olaraq t…ôyin edildi!")

        config = await get_module_config(chat_id, module_name)
        
        config_texts = {
            "antispam": f"üìä {lang.get('config_limit', 'Limit')}: {config.get('limit', 5)} {lang.get('config_messages', 'mesaj')}\n‚è± {lang.get('config_time', 'Vaxt')}: {config.get('time', 60)} {lang.get('config_seconds', 'saniy…ô')}",
            "antiflood": f"üìä {lang.get('config_limit', 'Limit')}: {config.get('limit', 10)} {lang.get('config_messages', 'mesaj')}\n‚è± {lang.get('config_time', 'Vaxt')}: {config.get('time', 10)} {lang.get('config_seconds', 'saniy…ô')}\n‚ö° {lang.get('config_action', 'H…ôr…ôk…ôt')}: {config.get('action', 'delete').title()}",
            "antivulgar": f"üìä {lang.get('config_limit', 'Limit')}: {config.get('limit', 3)} {lang.get('config_warnings', 'x…ôb…ôrdarlƒ±q')}\n‚è± {lang.get('config_time', 'Vaxt')}: {config.get('time', 60)} {lang.get('config_seconds', 'saniy…ô')}\nüîá {lang.get('config_mute', 'Mute')}: {lang.get('enabled', 'Aktiv') if config.get('mute', False) else lang.get('disabled', 'Deaktiv')}",
            "captcha": f"‚è∞ {lang.get('config_timeout', 'Vaxt limiti')}: {config.get('timeout', 300)} {lang.get('config_seconds', 'saniy…ô')}\nüîê {lang.get('config_math_problem', 'Yeni √ºzvl…ôr √º√ß√ºn riyazi m…ôs…ôl…ô')}"
        }

        text = f"<blockquote>‚öôÔ∏è <b>{module_name.title()} {lang.get('module_settings_title', 'T…ônziml…ôm…ôl…ôri')}</b>\n\n" \
               f"{config_texts.get(module_name, lang.get('config_not_available', 'T…ônziml…ôm…ô m√∂vcud deyil'))}\n\n" \
               f"{lang.get('configure_with_buttons', 'A≈üaƒüƒ±dakƒ± d√ºym…ôl…ôrl…ô t…ônziml…ôyin:')}</blockquote>"
        
        keyboard = create_config_keyboard(module_name, {})
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Config callback error: {e}")
        await callback_query.answer("X…ôta ba≈ü verdi!", show_alert=True)
