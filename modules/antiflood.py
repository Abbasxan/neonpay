import asyncio
import logging
from datetime import datetime, timedelta
from collections import defaultdict
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ChatMemberStatus
from config import app, db
from language import get_group_language, load_language
from modules.mute_utils import mute_user

logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_messages = defaultdict(list)

async def log_deleted_message(chat_id, user_id, message_type="flood", reason="Flood mesajlarƒ±"):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        await db.deleted_messages.insert_one({
            "chat_id": chat_id,
            "user_id": user_id,
            "type": message_type,
            "reason": reason,
            "timestamp": datetime.now()
        })
    except Exception as e:
        logger.error(f"[ANTIFLOOD] Failed to log deleted message: {e}")

async def add_warning(chat_id, user_id, reason="Flood mesajlarƒ±"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await db.warnings.insert_one({
            "chat_id": chat_id,
            "user_id": user_id,
            "reason": reason,
            "timestamp": datetime.now()
        })
    except Exception as e:
        logger.error(f"[ANTIFLOOD] Failed to add warning: {e}")

@app.on_message(filters.group & ~filters.command(["antiflood"]), group=3)
async def antiflood_handler(client: Client, message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞"""
    if not message.from_user:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã
    group_data = await db.groups.find_one({"_id": chat_id}) or {}
    if not group_data.get("antiflood_enabled", False):
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    max_messages = group_data.get("antiflood_limit", 5)  # –º–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π
    time_window = group_data.get("antiflood_time", 10)   # –∑–∞ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    action = group_data.get("antiflood_action", "delete") # –¥–µ–π—Å—Ç–≤–∏–µ: delete, warn, mute
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    try:
        member = await app.get_chat_member(chat_id, user_id)
        is_admin = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
        if is_admin:
            return  # –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω—Ç–∏—Ñ–ª—É–¥ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    except Exception:
        pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    now = datetime.now()
    user_key = f"{chat_id}_{user_id}"
    user_messages[user_key].append(now)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–Ω–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞)
    cutoff_time = now - timedelta(seconds=time_window)
    user_messages[user_key] = [msg_time for msg_time in user_messages[user_key] if msg_time > cutoff_time]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    if len(user_messages[user_key]) > max_messages:
        username = message.from_user.username or str(message.from_user.id)
        logger.info(f"[ANTIFLOOD] User {username} exceeded limit in {chat_id}: {len(user_messages[user_key])}/{max_messages}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if action == "delete":
            try:
                await message.delete()
                await log_deleted_message(chat_id, user_id, "flood", f"Flood: {len(user_messages[user_key])}/{max_messages}")
                logger.info(f"[ANTIFLOOD] Deleted flood message from {username} in {chat_id}")
            except Exception as e:
                logger.error(f"[ANTIFLOOD] Failed to delete message: {e}")
        
        elif action == "warn":
            try:
                await add_warning(chat_id, user_id, f"Flood mesajlarƒ±: {len(user_messages[user_key])}/{max_messages}")
                
                lang_code = await get_group_language(chat_id)
                lang = load_language(lang_code)
                
                notice = await client.send_message(
                    chat_id,
                    f"<blockquote>‚ö†Ô∏è {lang.get('flood_warning', 'Flood x…ôb…ôrdarlƒ±ƒüƒ±')} @{username}</blockquote>"
                )
                logger.info(f"[ANTIFLOOD] Warned user {username} for flood in {chat_id}")
            except Exception as e:
                logger.error(f"[ANTIFLOOD] Failed to warn user: {e}")
        
        elif action == "mute":
            try:
                lang_code = await get_group_language(chat_id)
                mute_duration = 5  # 5 –º–∏–Ω—É—Ç
                
                success = await mute_user(chat_id, user_id, mute_duration, lang_code)
                
                if success:
                    await add_warning(chat_id, user_id, f"Flood √º√ß√ºn susturuldu: {len(user_messages[user_key])}/{max_messages}")
                    
                    lang = load_language(lang_code)
                    
                    notice = await client.send_message(
                        chat_id,
                        f"<blockquote>üîá {lang.get('flood_muted', 'Flood √º√ß√ºn susturuldu')} @{username} ({mute_duration} d…ôqiq…ô)</blockquote>"
                    )
                    logger.info(f"[ANTIFLOOD] Muted user {username} for flood in {chat_id} for {mute_duration} minutes")
                else:
                    logger.error(f"[ANTIFLOOD] Failed to mute user {username} using mute_utils")
            except Exception as e:
                logger.error(f"[ANTIFLOOD] Failed to mute user: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
        user_messages[user_key] = []

@app.on_message(filters.command("antiflood") & filters.group, group=-1)
async def antiflood_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞"""
    if not message.from_user:
        return
    
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await app.get_chat_member(chat_id, user_id)
        is_admin = member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]
    except Exception:
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        return await message.reply(f"<blockquote>{lang.get('antiflood_admin_check_failed')}</blockquote>")
    
    if not is_admin:
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        return await message.reply(f"<blockquote>{lang.get('antiflood_admin_only')}</blockquote>")
    
    lang_code = await get_group_language(chat_id)
    lang = load_language(lang_code)
    
    args = message.text.split()[1:]
    
    if not args:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        group_data = await db.groups.find_one({"_id": chat_id}) or {}
        is_enabled = group_data.get("antiflood_enabled", False)
        limit = group_data.get("antiflood_limit", 5)
        time_window = group_data.get("antiflood_time", 10)
        action = group_data.get("antiflood_action", "delete")
        
        status_text = lang.get('antiflood_status_active') if is_enabled else lang.get('antiflood_status_inactive')
        action_text = {
            "delete": lang.get('antiflood_action_names'),
            "warn": lang.get('antiflood_action_warn'),
            "mute": lang.get('antiflood_action_mute')
        }.get(action, action)
        
        status_msg = lang.get('antiflood_status', 'üåä AntiFlood Statusu: {status}\nüìä Limit: {limit} mesaj / {time_window} saniy…ô\n‚ö° H…ôr…ôk…ôt: {action}').format(status=status_text, limit=limit, time_window=time_window, action=action_text)
        usage_msg = lang.get('antiflood_usage', 'ƒ∞stifad…ô:\n/antiflood on|off - Aktiv/deaktiv et\n/antiflood limit 5 10 - 5 mesaj / 10 saniy…ô\n/antiflood action delete|warn|mute - H…ôr…ôk…ôt n√∂v√º')
        
        return await message.reply(
            f"<blockquote>{status_msg}\n\n{usage_msg}</blockquote>"
        )
    
    if args[0].lower() in ["on", "off"]:
        enabled = args[0].lower() == "on"
        await db.groups.update_one(
            {"_id": chat_id}, 
            {"$set": {"antiflood_enabled": enabled}}, 
            upsert=True
        )
        
        status_text = lang.get('antiflood_enabled') if enabled else lang.get('antiflood_disabled')
        return await message.reply(f"<blockquote>‚úÖ {status_text}</blockquote>")
    
    elif args[0].lower() == "limit" and len(args) >= 3:
        try:
            limit = int(args[1])
            time_window = int(args[2])
            
            if limit < 1 or limit > 50:
                return await message.reply(f"<blockquote>{lang.get('antiflood_limit_range')}</blockquote>")
            
            if time_window < 1 or time_window > 300:
                return await message.reply(f"<blockquote>{lang.get('antiflood_time_range')}</blockquote>")
            
            await db.groups.update_one(
                {"_id": chat_id}, 
                {"$set": {
                    "antiflood_limit": limit,
                    "antiflood_time": time_window
                }}, 
                upsert=True
            )
            
            return await message.reply(
                f"<blockquote>{lang.get('antiflood_set_success', '‚úÖ AntiFlood limiti yenil…ôndi: {limit} mesaj / {time_window} saniy…ô').format(limit=limit, time=time_window, action='')}</blockquote>"
            )
        except ValueError:
            return await message.reply(f"<blockquote>{lang.get('antiflood_invalid_numbers')}</blockquote>")
    
    elif args[0].lower() == "action" and len(args) >= 2:
        action = args[1].lower()
        if action not in ["delete", "warn", "mute"]:
            return await message.reply(f"<blockquote>{lang.get('antiflood_invalid_action')}</blockquote>")
        
        await db.groups.update_one(
            {"_id": chat_id}, 
            {"$set": {"antiflood_action": action}}, 
            upsert=True
        )
        
        action_text = {
            "delete": lang.get('antiflood_action_names'),
            "warn": lang.get('antiflood_action_warn'),
            "mute": lang.get('antiflood_action_mute')
        }.get(action)
        return await message.reply(f"<blockquote>‚úÖ AntiFlood h…ôr…ôk…ôti yenil…ôndi: {action_text}</blockquote>")
    
    else:
        return await message.reply(
            f"<blockquote>{lang.get('antiflood_set_fail')}</blockquote>"
        )
          
