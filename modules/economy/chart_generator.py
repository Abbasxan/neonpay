"""
Chart Generator Module
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –¥–∏–∞–≥—Ä–∞–º–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import io
import matplotlib.pyplot as plt
from matplotlib import dates as mdates
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import numpy as np
from config import db
from .database import EconomyDB

logger = logging.getLogger(__name__)

class ChartGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è matplotlib
        plt.style.use('dark_background')
        self.colors = {
            'primary': '#00D4FF',      # –ù–µ–æ–Ω–æ–≤—ã–π —Å–∏–Ω–∏–π
            'secondary': '#FF6B6B',    # –ö—Ä–∞—Å–Ω—ã–π
            'success': '#4ECDC4',      # –ó–µ–ª–µ–Ω—ã–π
            'warning': '#FFE66D',      # –ñ–µ–ª—Ç—ã–π
            'info': '#A8E6CF',         # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            'background': '#1A1A1A',   # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω
            'grid': '#333333'          # –°–µ—Ç–∫–∞
        }
    
    async def generate_market_analysis_chart(self, chat_id: int) -> io.BytesIO:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        try:
            from .advanced_pricing import advanced_pricing
            analysis = await advanced_pricing.get_market_analysis(chat_id)
            
            if "error" in analysis:
                return await self._generate_error_chart(analysis["error"])
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))
            fig.patch.set_facecolor(self.colors['background'])
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è (—Ä–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
            await self._create_radar_chart(ax1, analysis['factors'])
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –∏ —Å—Ç–∞—Ç—É—Å
            await self._create_rate_status_chart(ax2, analysis)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            await self._create_rate_history_chart(ax3, chat_id)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            await self._create_rating_chart(ax4, analysis['total_score'])
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤–∞–ª—é—Ç—ã', 
                        fontsize=16, color=self.colors['primary'], fontweight='bold')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, 
                       facecolor=self.colors['background'], 
                       edgecolor='none', bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return await self._generate_error_chart(str(e))
    
    async def generate_currency_comparison_chart(self, chat_ids: List[int]) -> io.BytesIO:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø"""
        try:
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))
            fig.patch.set_facecolor(self.colors['background'])
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º
            currencies_data = []
            for chat_id in chat_ids:
                group_currency = await EconomyDB.get_group_currency(chat_id)
                if group_currency:
                    currencies_data.append({
                        'name': group_currency['currency_name'],
                        'symbol': group_currency['currency_symbol'],
                        'rate': group_currency['exchange_rate_to_nc'],
                        'activity': group_currency.get('daily_activity_score', 0),
                        'supply': group_currency.get('total_supply', 0),
                        'age': (datetime.utcnow() - group_currency.get('created_at', datetime.utcnow())).days
                    })
            
            if not currencies_data:
                return await self._generate_error_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–∞—Ö")
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
            await self._create_rates_comparison_chart(ax1, currencies_data)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø
            await self._create_activity_comparison_chart(ax2, currencies_data)
            
            fig.suptitle('üè¶ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç –≥—Ä—É–ø–ø', 
                        fontsize=16, color=self.colors['primary'], fontweight='bold')
            
            plt.tight_layout()
            
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, 
                       facecolor=self.colors['background'], 
                       edgecolor='none', bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
            return await self._generate_error_chart(str(e))
    
    async def generate_user_portfolio_chart(self, chat_id: int, user_id: int) -> io.BytesIO:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            balance = await EconomyDB.get_user_balance(chat_id, user_id)
            group_currency = await EconomyDB.get_group_currency(chat_id)
            
            if not group_currency:
                return await self._generate_error_chart("–í–∞–ª—é—Ç–∞ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
            fig.patch.set_facecolor(self.colors['background'])
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è (–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)
            await self._create_portfolio_pie_chart(ax1, balance, group_currency)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            await self._create_transaction_history_chart(ax2, chat_id, user_id)
            
            fig.suptitle(f'üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 
                        fontsize=16, color=self.colors['primary'], fontweight='bold')
            
            plt.tight_layout()
            
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=150, 
                       facecolor=self.colors['background'], 
                       edgecolor='none', bbox_inches='tight')
            img_buffer.seek(0)
            plt.close(fig)
            
            return img_buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
            return await self._generate_error_chart(str(e))
    
    async def _create_radar_chart(self, ax, factors: Dict):
        """–°–æ–∑–¥–∞—Ç—å —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        categories = ['–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–í–æ–∑—Ä–∞—Å—Ç', '–°–ø—Ä–æ—Å', '–¢—Ä–µ–Ω–¥']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_values = {'activity': 0.5, 'supply': 0.5, 'age': 0.5, 'demand': 0.5, 'trend': 0.5}
        values = []
        for key in ['activity', 'supply', 'age', 'demand', 'trend']:
            try:
                values.append(float(factors.get(key, default_values[key])))
            except (ValueError, TypeError):
                values.append(default_values[key])
        
        # –°–æ–∑–¥–∞–µ–º —É–≥–ª—ã –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        angles = np.linspace(0, 2 * np.pi, len(categories), endpoint=False).tolist()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –≤ –∫–æ–Ω–µ—Ü –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è
        values += values[:1]
        categories += categories[:1]
        angles += angles[:1]
        
        ax.plot(angles, values, 'o-', linewidth=2, color=self.colors['primary'])
        ax.fill(angles, values, alpha=0.25, color=self.colors['primary'])
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(categories[:-1], color='white')
        ax.set_ylim(0, 1)
        ax.set_title('–§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è', color=self.colors['primary'], fontweight='bold')
        ax.grid(True, color=self.colors['grid'], alpha=0.3)
    
    async def _create_rate_status_chart(self, ax, analysis: Dict):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞"""
        rate = analysis['current_rate']
        status = analysis['status']
        
        # –¶–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if '–ì–æ—Ä—è—á–∞—è' in status:
            color = self.colors['secondary']
        elif '–†–∞—Å—Ç—É—â–∞—è' in status:
            color = self.colors['success']
        elif '–°—Ç–∞–±–∏–ª—å–Ω–∞—è' in status:
            color = self.colors['info']
        elif '–°–ª–∞–±–∞—è' in status:
            color = self.colors['warning']
        else:
            color = self.colors['grid']
        
        # –°–æ–∑–¥–∞–µ–º –±–∞—Ä-—á–∞—Ä—Ç
        bars = ax.bar(['–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å'], [rate], color=color, alpha=0.8)
        ax.set_title(f'–ö—É—Ä—Å: {rate:.4f} NC', color=self.colors['primary'], fontweight='bold')
        ax.set_ylabel('NC', color='white')
        ax.set_ylim(0, max(rate * 1.5, 0.1))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –±–∞—Ä
        ax.text(0, rate + rate * 0.05, f'{rate:.4f}', 
               ha='center', va='bottom', color='white', fontweight='bold')
        
        ax.grid(True, color=self.colors['grid'], alpha=0.3)
        ax.set_facecolor(self.colors['background'])
    
    async def _create_rate_history_chart(self, ax, chat_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
            week_ago = datetime.utcnow() - timedelta(days=7)
            transactions = await db.economy_transactions.find({
                "chat_id": chat_id,
                "transaction_type": {"$in": ["group_to_nc", "nc_to_group"]},
                "created_at": {"$gte": week_ago}
            }).sort("created_at", 1).to_list(length=50)
            
            if not transactions:
                ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', 
                       ha='center', va='center', color='white', fontsize=12)
                ax.set_title('–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞', color=self.colors['primary'], fontweight='bold')
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            dates = []
            rates = []
            base_rate = 0.1
            
            for i, transaction in enumerate(transactions):
                dates.append(transaction['created_at'])
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                rate_change = np.random.normal(0, 0.01)  # –ù–µ–±–æ–ª—å—à–∏–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                base_rate = max(0.01, min(base_rate + rate_change, 2.0))
                rates.append(base_rate)
            
            ax.plot(dates, rates, color=self.colors['primary'], linewidth=2, marker='o', markersize=4)
            ax.set_title('–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞ (7 –¥–Ω–µ–π)', color=self.colors['primary'], fontweight='bold')
            ax.set_ylabel('–ö—É—Ä—Å (NC)', color='white')
            ax.grid(True, color=self.colors['grid'], alpha=0.3)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
            
        except Exception as e:
            ax.text(0.5, 0.5, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n–∏—Å—Ç–æ—Ä–∏–∏', 
                   ha='center', va='center', color='white', fontsize=12)
            ax.set_title('–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞', color=self.colors['primary'], fontweight='bold')
    
    async def _create_rating_chart(self, ax, total_score: str):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        try:
            score = float(total_score)
        except (ValueError, TypeError):
            score = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –¶–≤–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        if score >= 0.8:
            color = self.colors['success']
            label = '–û—Ç–ª–∏—á–Ω–æ'
        elif score >= 0.6:
            color = self.colors['info']
            label = '–•–æ—Ä–æ—à–æ'
        elif score >= 0.4:
            color = self.colors['warning']
            label = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
        else:
            color = self.colors['secondary']
            label = '–ü–ª–æ—Ö–æ'
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–∫—Ä—É–≥–ª—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        theta = np.linspace(0, np.pi, 100)
        r = np.ones_like(theta)
        
        ax.plot(theta, r, color=self.colors['grid'], linewidth=3)
        
        # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_theta = np.linspace(0, np.pi * score, 100)
        progress_r = np.ones_like(progress_theta)
        ax.fill_between(progress_theta, 0, progress_r, color=color, alpha=0.7)
        
        ax.set_xlim(0, np.pi)
        ax.set_ylim(0, 1.2)
        ax.set_title(f'–†–µ–π—Ç–∏–Ω–≥: {score:.2f}/1.0', color=self.colors['primary'], fontweight='bold')
        ax.text(np.pi/2, 0.6, label, ha='center', va='center', 
               color='white', fontsize=14, fontweight='bold')
        ax.axis('off')
    
    async def _create_rates_comparison_chart(self, ax, currencies_data: List[Dict]):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤"""
        names = [f"{c['symbol']}\n({c['name'][:10]}...)" for c in currencies_data]
        rates = [c['rate'] for c in currencies_data]
        
        bars = ax.bar(range(len(names)), rates, 
                     color=[self.colors['primary'] if r > 0.5 else self.colors['warning'] 
                           for r in rates])
        
        ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤', color=self.colors['primary'], fontweight='bold')
        ax.set_ylabel('–ö—É—Ä—Å (NC)', color='white')
        ax.set_xticks(range(len(names)))
        ax.set_xticklabels(names, rotation=45, ha='right', color='white')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, rate in enumerate(rates):
            ax.text(i, rate + max(rates) * 0.01, f'{rate:.3f}', 
                   ha='center', va='bottom', color='white', fontweight='bold')
        
        ax.grid(True, color=self.colors['grid'], alpha=0.3)
        ax.set_facecolor(self.colors['background'])
    
    async def _create_activity_comparison_chart(self, ax, currencies_data: List[Dict]):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        names = [c['symbol'] for c in currencies_data]
        activities = [c['activity'] for c in currencies_data]
        
        bars = ax.bar(range(len(names)), activities, color=self.colors['success'])
        ax.set_title('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø', color=self.colors['primary'], fontweight='bold')
        ax.set_ylabel('–û—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white')
        ax.set_xticks(range(len(names)))
        ax.set_xticklabels(names, color='white')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –±–∞—Ä—ã
        for i, activity in enumerate(activities):
            ax.text(i, activity + max(activities) * 0.01, f'{activity}', 
                   ha='center', va='bottom', color='white', fontweight='bold')
        
        ax.grid(True, color=self.colors['grid'], alpha=0.3)
        ax.set_facecolor(self.colors['background'])
    
    async def _create_portfolio_pie_chart(self, ax, balance: Dict, group_currency: Dict):
        """–°–æ–∑–¥–∞—Ç—å –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        labels = ['Neon Coins', group_currency['currency_symbol']]
        sizes = [balance['neon_coins'], balance['group_currency']]
        colors = [self.colors['primary'], self.colors['success']]
        
        # –£–±–∏—Ä–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        non_zero_data = [(label, size, color) for label, size, color in zip(labels, sizes, colors) if size > 0]
        
        if not non_zero_data:
            ax.text(0.5, 0.5, '–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç', ha='center', va='center', 
                   color='white', fontsize=14)
            ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è', color=self.colors['primary'], fontweight='bold')
            return
        
        labels, sizes, colors = zip(*non_zero_data)
        
        wedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',
                                         startangle=90, textprops={'color': 'white'})
        
        ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è', color=self.colors['primary'], fontweight='bold')
    
    async def _create_transaction_history_chart(self, ax, chat_id: int, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        try:
            week_ago = datetime.utcnow() - timedelta(days=7)
            transactions = await db.economy_transactions.find({
                "chat_id": chat_id,
                "user_id": user_id,
                "created_at": {"$gte": week_ago}
            }).sort("created_at", 1).to_list(length=20)
            
            if not transactions:
                ax.text(0.5, 0.5, '–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', 
                       ha='center', va='center', color='white', fontsize=12)
                ax.set_title('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', color=self.colors['primary'], fontweight='bold')
                return
            
            dates = [t['created_at'] for t in transactions]
            amounts = []
            
            for t in transactions:
                if t['transaction_type'] == 'group_to_nc':
                    amounts.append(t['amount_nc'])
                elif t['transaction_type'] == 'nc_to_group':
                    amounts.append(-t['amount_group'])
                else:
                    amounts.append(t.get('amount_nc', 0))
            
            colors = [self.colors['success'] if a > 0 else self.colors['secondary'] for a in amounts]
            
            ax.bar(range(len(dates)), amounts, color=colors, alpha=0.7)
            ax.set_title('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (7 –¥–Ω–µ–π)', color=self.colors['primary'], fontweight='bold')
            ax.set_ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', color='white')
            ax.set_xticks(range(0, len(dates), max(1, len(dates)//5)))
            ax.set_xticklabels([d.strftime('%d.%m') for d in dates[::max(1, len(dates)//5)]], 
                              rotation=45, color='white')
            ax.grid(True, color=self.colors['grid'], alpha=0.3)
            ax.set_facecolor(self.colors['background'])
            
        except Exception as e:
            ax.text(0.5, 0.5, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏\n—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', 
                   ha='center', va='center', color='white', fontsize=12)
            ax.set_title('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', color=self.colors['primary'], fontweight='bold')
    
    async def _generate_error_chart(self, error_message: str) -> io.BytesIO:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å –æ—à–∏–±–∫–æ–π"""
        fig, ax = plt.subplots(figsize=(8, 6))
        fig.patch.set_facecolor(self.colors['background'])
        
        ax.text(0.5, 0.5, f'‚ùå –û—à–∏–±–∫–∞\n{error_message}', 
               ha='center', va='center', color=self.colors['secondary'], 
               fontsize=14, fontweight='bold')
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=150, 
                   facecolor=self.colors['background'], 
                   edgecolor='none', bbox_inches='tight')
        img_buffer.seek(0)
        plt.close(fig)
        
        return img_buffer

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
chart_generator = ChartGenerator()
