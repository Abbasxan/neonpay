"""
Advanced Pricing Algorithm Module
–ú–æ–¥—É–ª—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
"""

import logging
import math
import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from config import db
from .database import EconomyDB

logger = logging.getLogger(__name__)

class AdvancedPricingEngine:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.market_volatility = 0.15  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ (15%)
        self.base_demand_factor = 0.1  # –ë–∞–∑–æ–≤—ã–π —Ñ–∞–∫—Ç–æ—Ä —Å–ø—Ä–æ—Å–∞
        self.supply_factor = 0.05  # –§–∞–∫—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        
    async def calculate_dynamic_rate(self, chat_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"""
        try:
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                return 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            activity_score = group_currency.get("daily_activity_score", 0)
            total_supply = group_currency.get("total_supply", 0)
            created_at = group_currency.get("created_at", datetime.utcnow())
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            activity_factor = self._calculate_activity_factor(activity_score)
            supply_factor = self._calculate_supply_factor(total_supply)
            age_factor = self._calculate_age_factor(created_at)
            demand_factor = self._calculate_demand_factor(chat_id)
            market_trend = self._calculate_market_trend(chat_id)
            
            # –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
            base_rate = 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å 0.05 NC
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∫—É—Ä—Å
            calculated_rate = (
                base_rate + 
                (activity_factor * 0.3) +
                (supply_factor * 0.2) +
                (age_factor * 0.15) +
                (demand_factor * 0.2) +
                (market_trend * 0.15)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = random.uniform(-self.market_volatility, self.market_volatility)
            final_rate = calculated_rate * (1 + volatility)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫—É—Ä—Å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            final_rate = max(0.01, min(final_rate, 2.0))  # –û—Ç 0.01 –¥–æ 2.0 NC
            
            logger.info(f"üìä –ö—É—Ä—Å –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {final_rate:.4f} NC "
                       f"(–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_factor:.2f}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {supply_factor:.2f}, "
                       f"–≤–æ–∑—Ä–∞—Å—Ç: {age_factor:.2f}, —Å–ø—Ä–æ—Å: {demand_factor:.2f}, —Ç—Ä–µ–Ω–¥: {market_trend:.2f})")
            
            return final_rate
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∫—É—Ä—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
            return 0.1
    
    def _calculate_activity_factor(self, activity_score: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if activity_score <= 0:
            return 0.0
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = 1000 –æ—á–∫–æ–≤
        normalized_activity = min(activity_score / 1000, 1.0)
        return math.log(1 + normalized_activity * 9) / math.log(10)  # –û—Ç 0 –¥–æ 1
    
    def _calculate_supply_factor(self, total_supply: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–¥–µ—Ñ–∏—Ü–∏—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—É)"""
        if total_supply <= 0:
            return 0.5  # –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è = –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
        
        # –ß–µ–º –º–µ–Ω—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Ç–µ–º –≤—ã—à–µ —Ü–µ–Ω–∞
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ = 10000 –µ–¥–∏–Ω–∏—Ü
        optimal_supply = 10000
        supply_ratio = total_supply / optimal_supply
        
        if supply_ratio < 0.1:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–µ—Ñ–∏—Ü–∏—Ç
            return 0.8
        elif supply_ratio < 0.5:  # –î–µ—Ñ–∏—Ü–∏—Ç
            return 0.6
        elif supply_ratio < 2.0:  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            return 0.3
        else:  # –ò–∑–±—ã—Ç–æ–∫
            return 0.1
    
    def _calculate_age_factor(self, created_at: datetime) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞ –≤–∞–ª—é—Ç—ã"""
        age_days = (datetime.utcnow() - created_at).days
        
        if age_days < 1:  # –ù–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã
            return 0.1
        elif age_days < 7:  # –ú–æ–ª–æ–¥—ã–µ –≤–∞–ª—é—Ç—ã
            return 0.3
        elif age_days < 30:  # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –≤–∞–ª—é—Ç—ã
            return 0.5
        elif age_days < 90:  # –ó—Ä–µ–ª—ã–µ –≤–∞–ª—é—Ç—ã
            return 0.7
        else:  # –°—Ç–∞—Ä—ã–µ –≤–∞–ª—é—Ç—ã
            return 0.9
    
    async def _calculate_demand_factor(self, chat_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä —Å–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π"""
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = datetime.utcnow() - timedelta(days=1)
            
            conversions = await db.economy_transactions.count_documents({
                "chat_id": chat_id,
                "transaction_type": {"$in": ["group_to_nc", "nc_to_group"]},
                "created_at": {"$gte": yesterday}
            })
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø—Ä–æ—Å
            if conversions == 0:
                return 0.1  # –ù–µ—Ç —Å–ø—Ä–æ—Å–∞
            elif conversions < 5:
                return 0.3  # –ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å
            elif conversions < 20:
                return 0.5  # –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–æ—Å
            elif conversions < 50:
                return 0.7  # –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å
            else:
                return 0.9  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å–ø—Ä–æ—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
            return 0.3
    
    async def _calculate_market_trend(self, chat_id: int) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫—É—Ä—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                return 0.0
            
            last_update = group_currency.get("last_rate_update", datetime.utcnow())
            current_rate = group_currency.get("exchange_rate_to_nc", 0.1)
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            hours_since_update = (datetime.utcnow() - last_update).total_seconds() / 3600
            
            if hours_since_update < 1:  # –ù–µ–¥–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω
                return 0.1
            elif hours_since_update < 6:  # –ù–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                return 0.0
            elif hours_since_update < 24:  # –í—á–µ—Ä–∞
                return -0.1
            else:  # –î–∞–≤–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è
                return -0.2
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
            return 0.0
    
    async def get_market_analysis(self, chat_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        try:
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                return {"error": "–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
            
            current_rate = group_currency.get("exchange_rate_to_nc", 0.1)
            activity_score = group_currency.get("daily_activity_score", 0)
            total_supply = group_currency.get("total_supply", 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–æ—Ä—ã
            activity_factor = self._calculate_activity_factor(activity_score)
            supply_factor = self._calculate_supply_factor(total_supply)
            age_factor = self._calculate_age_factor(group_currency.get("created_at", datetime.utcnow()))
            demand_factor = await self._calculate_demand_factor(chat_id)
            market_trend = await self._calculate_market_trend(chat_id)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª—é—Ç—ã
            total_score = (activity_factor + supply_factor + age_factor + demand_factor + market_trend) / 5
            
            if total_score >= 0.8:
                status = "üî• –ì–æ—Ä—è—á–∞—è –≤–∞–ª—é—Ç–∞"
                recommendation = "–û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"
            elif total_score >= 0.6:
                status = "üìà –†–∞—Å—Ç—É—â–∞—è –≤–∞–ª—é—Ç–∞"
                recommendation = "–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–æ—Å—Ç–∞"
            elif total_score >= 0.4:
                status = "üìä –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞"
                recommendation = "–ù–∞–¥–µ–∂–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è"
            elif total_score >= 0.2:
                status = "üìâ –°–ª–∞–±–∞—è –≤–∞–ª—é—Ç–∞"
                recommendation = "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏"
            else:
                status = "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞"
                recommendation = "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"
            
            return {
                "current_rate": current_rate,
                "status": status,
                "recommendation": recommendation,
                "factors": {
                    "activity": f"{activity_factor:.2f}",
                    "supply": f"{supply_factor:.2f}",
                    "age": f"{age_factor:.2f}",
                    "demand": f"{demand_factor:.2f}",
                    "trend": f"{market_trend:.2f}"
                },
                "total_score": f"{total_score:.2f}"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
            return {"error": str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
advanced_pricing = AdvancedPricingEngine()
