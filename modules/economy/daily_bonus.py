"""
Daily Bonus System Module
–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
"""

import logging
import random
from datetime import datetime, timedelta
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import app
from language import load_language, get_group_language
from .database import EconomyDB

logger = logging.getLogger(__name__)

class DailyBonusManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤"""
    
    async def show_daily_bonus(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
        can_claim = await EconomyDB.can_claim_daily_bonus(chat_id, user_id)
        
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        group_currency = await EconomyDB.get_group_currency(chat_id)
        
        if not group_currency:
            return await callback_query.answer(
                lang.get('economy_not_setup')
            )
        
        currency_symbol = group_currency["currency_symbol"]
        
        if can_claim:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
            bonus_amount = await self.calculate_bonus_amount(chat_id, user_id)
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        f"üéÅ {lang.get('economy_claim_bonus')}",
                        callback_data=f"economy_claim_bonus_{chat_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        f"üîô {lang.get('economy_back')}",
                        callback_data=f"economy_back_{chat_id}"
                    )
                ]
            ])
            
            text = f"""
üéÅ <b>{lang.get('economy_daily_bonus_title')}</b>

üí∞ <b>{lang.get('economy_today_bonus')}:</b> <code>{bonus_amount:,}</code> {currency_symbol}

üéØ <b>{lang.get('economy_how_to_increase')}:</b>
‚Ä¢ {lang.get('economy_be_active')}
‚Ä¢ {lang.get('economy_participate')}
‚Ä¢ {lang.get('economy_complete_achievements')}

üìä <b>{lang.get('economy_current_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>

{lang.get('economy_click_button_bonus')}
            """
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ–Ω—É—Å–∞
            last_bonus = balance.get("last_daily_bonus")
            if last_bonus:
                next_bonus_time = last_bonus + timedelta(hours=24)
                time_left = next_bonus_time - datetime.utcnow()
                
                hours_left = int(time_left.total_seconds() // 3600)
                minutes_left = int((time_left.total_seconds() % 3600) // 60)
                
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            f"üîô {lang.get('economy_back')}",
                            callback_data=f"economy_back_{chat_id}"
                        )
                    ]
                ])
                
                text = f"""
üéÅ <b>{lang.get('economy_daily_bonus_title')}</b>

‚è∞ <b>{lang.get('economy_next_bonus_in')}:</b> {hours_left}{lang.get('economy_bonus_hours')} {minutes_left}{lang.get('economy_bonus_minutes')}

üìä <b>{lang.get('economy_current_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>

üîÑ <b>{lang.get('economy_last_bonus_short')}:</b> {last_bonus.strftime('%d.%m.%Y %H:%M')}

{lang.get('economy_come_back_tomorrow')}
                """
            else:
                # –ü–µ—Ä–≤—ã–π –±–æ–Ω—É—Å
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton(
                            f"üéÅ {lang.get('economy_claim_bonus')}",
                            callback_data=f"economy_claim_bonus_{chat_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            f"üîô {lang.get('economy_back')}",
                            callback_data=f"economy_back_{chat_id}"
                        )
                    ]
                ])
                
                text = f"""
üéÅ <b>{lang.get('economy_daily_bonus_title')}</b>

üéâ <b>{lang.get('economy_welcome_economy')}</b>

üí∞ <b>{lang.get('economy_first_bonus')}:</b> <code>100</code> {currency_symbol}

üìä <b>{lang.get('economy_current_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>

{lang.get('economy_get_first_bonus')}
                """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def claim_daily_bonus(self, chat_id: int, user_id: int) -> tuple[bool, str, int]:
        """–í—ã–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å
        can_claim = await EconomyDB.can_claim_daily_bonus(chat_id, user_id)
        
        if not can_claim:
            return False, lang.get('economy_bonus_already_claimed'), 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞
        bonus_amount = await self.calculate_bonus_amount(chat_id, user_id)
        
        # –í—ã–¥–∞–µ–º –±–æ–Ω—É—Å
        await EconomyDB.claim_daily_bonus(chat_id, user_id, bonus_amount)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
        from .auto_updater import track_daily_bonus_activity
        await track_daily_bonus_activity(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        from .achievements import AchievementManager
        achievement_manager = AchievementManager()
        await achievement_manager.check_achievements(chat_id, user_id, "daily_bonus")
        
        return True, lang.get('economy_bonus_claimed').format(amount=bonus_amount), bonus_amount
    
    async def calculate_bonus_amount(self, chat_id: int, user_id: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±–æ–Ω—É—Å–∞"""
        # –ë–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å
        base_bonus = 50
        
        # –ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã
        group_currency = await EconomyDB.get_group_currency(chat_id)
        activity_score = group_currency.get("daily_activity_score", 0)
        activity_bonus = min(activity_score // 10, 50)  # –ú–∞–∫—Å–∏–º—É–º +50 –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = await EconomyDB.get_user_achievements(chat_id, user_id)
        achievement_bonus = len(achievements) * 5  # +5 –∑–∞ –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        
        # –°–ª—É—á–∞–π–Ω—ã–π –±–æ–Ω—É—Å
        random_bonus = random.randint(0, 25)
        
        # –û–±—â–∏–π –±–æ–Ω—É—Å
        total_bonus = base_bonus + activity_bonus + achievement_bonus + random_bonus
        
        return total_bonus
    
    async def update_group_activity(self, chat_id: int, activity_points: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã"""
        await EconomyDB.update_activity_score(chat_id, activity_points)
    
    async def get_bonus_info(self, chat_id: int, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–Ω—É—Å–µ"""
        can_claim = await EconomyDB.can_claim_daily_bonus(chat_id, user_id)
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        
        info = {
            "can_claim": can_claim,
            "last_bonus": balance.get("last_daily_bonus"),
            "next_bonus_time": None
        }
        
        if not can_claim and balance.get("last_daily_bonus"):
            next_bonus_time = balance["last_daily_bonus"] + timedelta(hours=24)
            info["next_bonus_time"] = next_bonus_time
        
        return info

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
@app.on_callback_query(filters.regex("^economy_claim_bonus_"), group=20)
async def claim_bonus_callback(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞"""
    try:
        chat_id = int(callback_query.data.split("_")[-1])
        user_id = callback_query.from_user.id
        
        daily_bonus_manager = DailyBonusManager()
        success, message, bonus_amount = await daily_bonus_manager.claim_daily_bonus(chat_id, user_id)
        
        if success:
            await callback_query.answer(f"‚úÖ {message}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
            await daily_bonus_manager.show_daily_bonus(client, callback_query)
        else:
            await callback_query.answer(f"‚ùå {message}")
            
    except Exception as e:
        logger.error(f"Error in claim bonus callback: {e}")
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—à–∏–±–∫–∏
        try:
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            await callback_query.answer(lang.get('economy_error_occurred'))
        except:
            await callback_query.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')
