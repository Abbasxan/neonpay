"""
Balance Fix Module
–ú–æ–¥—É–ª—å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–í–†–ï–ú–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ - –£–î–ê–õ–ò–¢–¨ –ü–û–°–õ–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
"""

import logging
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.enums import ChatMemberStatus
from config import app
from language import load_language, get_group_language

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EconomyDB –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞ app
try:
    from .database import EconomyDB
except ImportError:
    from modules.economy.database import EconomyDB

logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª—è
logger.info("‚úÖ Balance fix module loaded successfully")

@app.on_message(filters.command("fix_balances") & filters.group, group=100)
async def fix_balances_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await client.get_chat_member(chat_id, user_id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            return await message.reply(
                f"<blockquote>‚ùå {lang.get('economy_admin_only')}</blockquote>"
            )
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–∞–ª–∞–Ω—Å—ã
    try:
        fixed_count = await EconomyDB.fix_all_user_balances(chat_id)
        
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        await message.reply(
            f"<blockquote>‚úÖ {lang.get('fix_balances_fixed_count', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤')}: {fixed_count}</blockquote>"
        )
        
        logger.info(f"Fixed {fixed_count} balances in chat {chat_id}")
        
    except Exception as e:
        logger.error(f"Error fixing balances: {e}")
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        await message.reply(
            f"<blockquote>‚ùå {lang.get('fix_balances_error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–æ–≤')}</blockquote>"
        )

@app.on_message(filters.command("fix_my_balance") & filters.group, group=100)
async def fix_my_balance_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fixed = await EconomyDB.fix_user_balance(chat_id, user_id)
        
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        if fixed:
            await message.reply(
                f"<blockquote>‚úÖ {lang.get('fix_balances_fixed')}</blockquote>"
            )
        else:
            await message.reply(
                f"<blockquote>‚ÑπÔ∏è {lang.get('fix_balances_no_fix_needed')}</blockquote>"
            )
        
        logger.info(f"Fixed balance for user {user_id} in chat {chat_id}: {fixed}")
        
    except Exception as e:
        logger.error(f"Error fixing user balance: {e}")
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        await message.reply(
            f"<blockquote>‚ùå {lang.get('fix_balances_error_user', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞')}</blockquote>"
        )

@app.on_message(filters.command("clear_economy") & filters.group, group=100)
async def clear_economy_command(client: Client, message: Message):
    """–í–†–ï–ú–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await client.get_chat_member(chat_id, user_id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            return await message.reply(
                f"<blockquote>‚ùå {lang.get('economy_admin_only')}</blockquote>"
            )
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return
    
    # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
    try:
        from config import db
        
        cleared_counts = {}
        total_cleared = 0
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π)
        collections_to_clear = [
            ("user_balances", "–ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            ("group_currencies", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç –≥—Ä—É–ø–ø"),
            ("economy_transactions", "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"),
            ("user_achievements", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            ("daily_bonuses", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã")
        ]
        
        for collection_name, description in collections_to_clear:
            collection = db[collection_name]
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            result = await collection.delete_many({})
            cleared_counts[collection_name] = result.deleted_count
            total_cleared += result.deleted_count
            logger.info(f"Cleared {result.deleted_count} documents from {collection_name} ({description})")
        
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ
        report = f"""
üóëÔ∏è <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:</b>
"""
        for collection_name, count in cleared_counts.items():
            report += f"‚Ä¢ {collection_name}: <code>{count}</code> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        
        report += f"\n‚úÖ <b>–í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ:</b> <code>{total_cleared}</code> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        report += f"\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω—ã!"
        report += f"\nüîÑ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /economy"
        
        await message.reply(report)
        
        logger.warning(f"ECONOMY SYSTEM COMPLETELY CLEARED in chat {chat_id} by user {user_id}")
        logger.warning(f"Total documents cleared: {total_cleared}")
        
    except Exception as e:
        logger.error(f"Error clearing economy system: {e}")
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        await message.reply(
            f"<blockquote>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã: {str(e)}</blockquote>"
        )

@app.on_message(filters.command("clear_group_economy") & filters.group, group=100)
async def clear_group_economy_command(client: Client, message: Message):
    """–í–†–ï–ú–ï–ù–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await client.get_chat_member(chat_id, user_id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            return await message.reply(
                f"<blockquote>‚ùå {lang.get('economy_admin_only')}</blockquote>"
            )
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return
    
    # –û—á–∏—Å—Ç–∫–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    try:
        from config import db
        
        cleared_counts = {}
        total_cleared = 0
        
        # –û—á–∏—â–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ (—Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: user_balances)
        users_result = await db.user_balances.delete_many({"chat_id": chat_id})
        cleared_counts["user_balances"] = users_result.deleted_count
        total_cleared += users_result.deleted_count
        
        # –û—á–∏—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã –≥—Ä—É–ø–ø—ã (—Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: group_currencies)
        groups_result = await db.group_currencies.delete_many({"_id": chat_id})
        cleared_counts["group_currencies"] = groups_result.deleted_count
        total_cleared += groups_result.deleted_count
        
        # –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ (—Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: economy_transactions)
        transactions_result = await db.economy_transactions.delete_many({"chat_id": chat_id})
        cleared_counts["economy_transactions"] = transactions_result.deleted_count
        total_cleared += transactions_result.deleted_count
        
        # –û—á–∏—â–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ (—Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: user_achievements)
        achievements_result = await db.user_achievements.delete_many({"chat_id": chat_id})
        cleared_counts["user_achievements"] = achievements_result.deleted_count
        total_cleared += achievements_result.deleted_count
        
        # –û—á–∏—â–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ (—Ä–µ–∞–ª—å–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: daily_bonuses)
        daily_bonuses_result = await db.daily_bonuses.delete_many({"chat_id": chat_id})
        cleared_counts["daily_bonuses"] = daily_bonuses_result.deleted_count
        total_cleared += daily_bonuses_result.deleted_count
        
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ–± –æ—á–∏—Å—Ç–∫–µ
        report = f"""
üóëÔ∏è <b>–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥—Ä—É–ø–ø—ã –æ—á–∏—â–µ–Ω–∞!</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã:</b>
"""
        for collection_name, count in cleared_counts.items():
            report += f"‚Ä¢ {collection_name}: <code>{count}</code> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        
        report += f"\n‚úÖ <b>–í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ:</b> <code>{total_cleared}</code> –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        report += f"\n\n‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —É–¥–∞–ª–µ–Ω—ã!"
        report += f"\nüîÑ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /economy"
        
        await message.reply(report)
        
        logger.warning(f"GROUP ECONOMY SYSTEM CLEARED in chat {chat_id} by user {user_id}")
        logger.warning(f"Total documents cleared: {total_cleared}")
        
    except Exception as e:
        logger.error(f"Error clearing group economy system: {e}")
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        await message.reply(
            f"<blockquote>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–ø–ø—ã: {str(e)}</blockquote>"
        )

logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã /fix_balances, /fix_my_balance, /clear_economy –∏ /clear_group_economy –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")