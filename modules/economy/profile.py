"""
Profile Management Module
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏
"""

import logging
from datetime import datetime, timedelta
from pyrogram import Client
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import app
from language import load_language, get_group_language
from .database import EconomyDB

logger = logging.getLogger(__name__)

class ProfileManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    
    async def show_profile(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            chat_id = callback_query.message.chat.id
            user_id = callback_query.from_user.id
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                user = await client.get_users(user_id)
            except Exception as e:
                logger.error(f"Error getting user: {e}")
                await callback_query.answer(lang.get('economy_user_data_error', '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await EconomyDB.get_user_balance(chat_id, user_id)
            group_currency = await EconomyDB.get_group_currency(chat_id)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"Profile balance for user {user_id} in chat {chat_id}: GG={balance.get('group_currency', 0):.2f}, NC={balance.get('neon_coins', 0):.2f}, Total={balance.get('total_earned', 0):.2f}")
            
            if not group_currency:
                await callback_query.answer(lang.get('economy_not_setup', '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'))
                return
            
            currency_symbol = group_currency["currency_symbol"]
            currency_name = group_currency["currency_name"]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            achievements = await EconomyDB.get_user_achievements(chat_id, user_id)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            days_in_group = await self.calculate_days_in_group(chat_id, user_id)
            daily_earnings = balance.get('total_earned', 0) / max(days_in_group, 1)
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        f"üèÜ {lang.get('economy_achievements', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è')}",
                        callback_data=f"economy_achievements_{chat_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        f"üîô {lang.get('economy_back', '–ù–∞–∑–∞–¥')}",
                        callback_data=f"economy_back_{chat_id}"
                    )
                ]
            ])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            text = f"""
üë§ <b>{lang.get('economy_profile_title')}</b>

<b>{user.first_name}</b> {f'(@{user.username})' if user.username else ''}
üÜî ID: <code>{user_id}</code>

üí∞ <b>{lang.get('economy_finances')}:</b>
üè¶ {currency_name} ({currency_symbol}): <code>{balance.get('group_currency', 0):.2f}</code>
üíé Neon Coins (NC): <code>{balance.get('neon_coins', 0):.2f}</code>
üìà {lang.get('economy_total_earned')}: <code>{balance.get('total_earned', 0):.2f}</code> {currency_symbol}

üìä <b>{lang.get('economy_activity_stats')}:</b>
üìÖ {lang.get('economy_days_in_group')}: <code>{days_in_group}</code>
üíπ {lang.get('economy_daily_earnings')}: <code>{daily_earnings:.1f}</code> {currency_symbol}
üèÜ {lang.get('economy_achievements_count')}: <code>{len(achievements)}</code>

üéØ <b>{lang.get('economy_recent_achievements')}:</b>
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            recent_achievements = achievements[-3:] if achievements else []
            if recent_achievements:
                for achievement in recent_achievements:
                    achievement_id = achievement['achievement_id']
                    reward_amount = achievement['reward_amount']
                    reward_currency = achievement['reward_currency']
                    earned_date = achievement.get('earned_at', datetime.utcnow())
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    date_str = earned_date.strftime('%d.%m.%Y')
                    
                    text += f"\nüèÖ {achievement_id} (+{reward_amount} {reward_currency}) - {date_str}"
            else:
                text += f"\nüìù <i>{lang.get('economy_no_achievements', '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π')}</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            await callback_query.edit_message_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error in show_profile: {e}")
            try:
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                lang_code = await get_group_language(chat_id)
                lang = load_language(lang_code)
                await callback_query.answer(lang.get('economy_profile_error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è'), show_alert=True)
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)
                except:
                    pass
    
    async def calculate_days_in_group(self, chat_id: int, user_id: int) -> int:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –≥—Ä—É–ø–ø–µ
            from config import app
            member = await app.get_chat_member(chat_id, user_id)
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ, —Å—á–∏—Ç–∞–µ–º —Å –º–æ–º–µ–Ω—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if member.status in ["member", "administrator", "creator"]:
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏—Å—Ç–æ—Ä–∏–∏)
                return 30  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π
            else:
                return 0
        except Exception as e:
            logger.error(f"Error calculating days in group: {e}")
            return 0
    
    async def get_user_stats(self, chat_id: int, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        achievements = await EconomyDB.get_user_achievements(chat_id, user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        transactions = await self.get_user_transactions(chat_id, user_id, limit=10)
        
        return {
            "balance": balance,
            "achievements_count": len(achievements),
            "recent_transactions": transactions,
            "days_in_group": await self.calculate_days_in_group(chat_id, user_id)
        }
    
    async def get_user_transactions(self, chat_id: int, user_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from config import db
            cursor = db.economy_transactions.find(
                {"chat_id": chat_id, "user_id": user_id}
            ).sort("timestamp", -1).limit(limit)
            
            transactions = await cursor.to_list(length=limit)
            return transactions
        except Exception as e:
            logger.error(f"Error getting user transactions: {e}")
            return []
    
    async def format_transaction(self, transaction: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        transaction_type = transaction.get("type", "unknown")
        amount = transaction.get("amount", 0)
        currency = transaction.get("currency", "")
        description = transaction.get("description", "")
        timestamp = transaction.get("timestamp", datetime.utcnow())
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        time_str = timestamp.strftime("%d.%m %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        type_emoji = {
            "daily_bonus": "üéÅ",
            "achievement": "üèÜ",
            "conversion": "üîÑ",
            "game_win": "üéÆ",
            "admin_gift": "üéÅ"
        }.get(transaction_type, "üí∞")
        
        return f"{type_emoji} {time_str}: {amount} {currency} - {description}"
