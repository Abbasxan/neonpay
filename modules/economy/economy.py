"""
Main Economy Module
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import logging
from datetime import datetime, timedelta
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.enums import ChatMemberStatus
from config import app, db
from language import load_language, get_group_language, get_text
from .database import EconomyDB
from .currency import CurrencyManager
from .profile import ProfileManager
from .achievements import AchievementManager
from .daily_bonus import DailyBonusManager

logger = logging.getLogger(__name__)

class EconomyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.currency_manager = CurrencyManager()
        self.profile_manager = ProfileManager()
        self.achievement_manager = AchievementManager()
        self.daily_bonus_manager = DailyBonusManager()
    
    async def show_main_menu(self, client: Client, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª—é—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
        group_currency = await EconomyDB.get_group_currency(chat_id)
        if not group_currency:
            return await self.show_setup_menu(client, message)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        group_stats = await EconomyDB.get_group_statistics(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîÑ {lang.get('economy_convert')}",
                    callback_data=f"economy_convert_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"üèÜ {lang.get('economy_achievements')}",
                    callback_data=f"economy_achievements_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üéÅ {lang.get('economy_daily_bonus')}",
                    callback_data=f"economy_daily_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"üìä {lang.get('economy_leaderboard')}",
                    callback_data=f"economy_leaderboard_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üë§ {lang.get('economy_profile')}",
                    callback_data=f"economy_profile_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"üìà {lang.get('economy_charts')}",
                    callback_data=f"economy_charts_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"‚öôÔ∏è {lang.get('economy_settings')}",
                    callback_data=f"economy_settings_{chat_id}"
                )
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        currency_name = group_currency["currency_name"]
        currency_symbol = group_currency["currency_symbol"]
        
        text = f"""
üí∞ <b>{lang.get('economy_title')}</b>

üè¶ <b>{currency_name} ({currency_symbol})</b>
üíé <b>{lang.get('economy_neon_coins')}</b>

üë§ <b>{lang.get('economy_your_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>
‚Ä¢ {lang.get('economy_total_earned_short')}: <code>{balance['total_earned']:.2f}</code>

üè¢ <b>{lang.get('economy_group_statistics')}:</b>
‚Ä¢ {lang.get('economy_total_users')}: <code>{group_stats['total_users']}</code>
‚Ä¢ {lang.get('economy_group_total')} {currency_symbol}: <code>{group_stats['total_group_currency']:.2f}</code>
‚Ä¢ {lang.get('economy_group_total')} NC: <code>{group_stats['total_neon_coins']:.2f}</code>

üîÑ <b>{lang.get('economy_exchange_rate')}:</b> 1 {currency_symbol} = {group_currency['exchange_rate_to_nc']:.2f} NC
        """
        
        await message.reply(text, reply_markup=keyboard)
    
    async def show_main_menu_callback(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —ç–∫–æ–Ω–æ–º–∏–∫–∏ —á–µ—Ä–µ–∑ callback (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è)"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª—é—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
        group_currency = await EconomyDB.get_group_currency(chat_id)
        if not group_currency:
            return await self.show_setup_menu_callback(client, callback_query)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        group_stats = await EconomyDB.get_group_statistics(chat_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîÑ {lang.get('economy_convert')}",
                    callback_data=f"economy_convert_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"üèÜ {lang.get('economy_achievements')}",
                    callback_data=f"economy_achievements_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üéÅ {lang.get('economy_daily_bonus')}",
                    callback_data=f"economy_daily_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"üìä {lang.get('economy_leaderboard')}",
                    callback_data=f"economy_leaderboard_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üë§ {lang.get('economy_profile')}",
                    callback_data=f"economy_profile_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"üìà {lang.get('economy_charts')}",
                    callback_data=f"economy_charts_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"‚öôÔ∏è {lang.get('economy_settings')}",
                    callback_data=f"economy_settings_{chat_id}"
                )
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        currency_name = group_currency["currency_name"]
        currency_symbol = group_currency["currency_symbol"]
        
        text = f"""
üí∞ <b>{lang.get('economy_title')}</b>

üè¶ <b>{currency_name} ({currency_symbol})</b>
üíé <b>{lang.get('economy_neon_coins')}</b>

üë§ <b>{lang.get('economy_your_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>
‚Ä¢ {lang.get('economy_total_earned_short')}: <code>{balance['total_earned']:.2f}</code>

üè¢ <b>{lang.get('economy_group_statistics')}:</b>
‚Ä¢ {lang.get('economy_total_users')}: <code>{group_stats['total_users']}</code>
‚Ä¢ {lang.get('economy_group_total')} {currency_symbol}: <code>{group_stats['total_group_currency']:.2f}</code>
‚Ä¢ {lang.get('economy_group_total')} NC: <code>{group_stats['total_neon_coins']:.2f}</code>

üîÑ <b>{lang.get('economy_exchange_rate')}:</b> 1 {currency_symbol} = {group_currency['exchange_rate_to_nc']:.2f} NC
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_setup_menu_callback(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ callback"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = await client.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await callback_query.edit_message_text(
                    f"<blockquote>{lang.get('economy_admin_only')}</blockquote>"
                )
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üè¶ {lang.get('economy_create_currency')}",
                    callback_data=f"economy_create_currency_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"‚ÑπÔ∏è {lang.get('economy_info')}",
                    callback_data=f"economy_info_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üí∞ <b>{lang.get('economy_setup_title')}</b>

{lang.get('economy_setup_description')}

üìã <b>{lang.get('economy_features')}:</b>
‚Ä¢ {lang.get('economy_create_group_currency')}
‚Ä¢ {lang.get('economy_daily_bonuses')}
‚Ä¢ {lang.get('economy_achievements_system')}
‚Ä¢ {lang.get('economy_currency_conversion')}
‚Ä¢ {lang.get('economy_leaderboard', '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_setup_menu(self, client: Client, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã"""
        chat_id = message.chat.id
        user_id = message.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = await client.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await message.reply(
                    f"<blockquote>{lang.get('economy_admin_only')}</blockquote>"
                )
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üè¶ {lang.get('economy_create_currency')}",
                    callback_data=f"economy_create_currency_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"‚ÑπÔ∏è {lang.get('economy_info')}",
                    callback_data=f"economy_info_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üí∞ <b>{lang.get('economy_setup_title')}</b>

{lang.get('economy_setup_description')}

üìã <b>{lang.get('economy_features')}:</b>
‚Ä¢ {lang.get('economy_create_group_currency')}
‚Ä¢ {lang.get('economy_daily_bonuses')}
‚Ä¢ {lang.get('economy_achievements_system')}
‚Ä¢ {lang.get('economy_currency_conversion')}
‚Ä¢ {lang.get('economy_leaderboard', '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}
        """
        
        await message.reply(text, reply_markup=keyboard)
    
    async def handle_callback(self, client: Client, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        data = callback_query.data
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        logger.info(f"Economy callback received: {data} from user {user_id} in chat {chat_id}")
        
        # Load language for error messages
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        if data.startswith("economy_convert_to_nc_"):
            logger.debug(f"DEBUG: Processing economy_convert_to_nc_ callback")
            try:
                await self.show_convert_to_nc(client, callback_query)
            except Exception as e:
                logger.error(f"Error in show_convert_to_nc: {e}")
                import traceback
                logger.error(f"Full traceback: {traceback.format_exc()}")
                await callback_query.answer(f"‚ùå {lang.get('economy_conversion_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')}!", show_alert=True)
        elif data.startswith("economy_convert_to_group_"):
            try:
                await self.show_convert_to_group(client, callback_query)
            except Exception as e:
                logger.error(f"Error in show_convert_to_group: {e}")
                await callback_query.answer(f"‚ùå {lang.get('economy_conversion_error', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')}!", show_alert=True)
        elif data.startswith("economy_convert_nc_amount_"):
            logger.debug(f"DEBUG: Processing economy_convert_nc_amount_ callback")
            await self.handle_convert_nc_amount(client, callback_query)
        elif data.startswith("economy_convert_group_amount_"):
            logger.debug(f"DEBUG: Processing economy_convert_group_amount_ callback")
            await self.handle_convert_group_amount(client, callback_query)
        elif data.startswith("economy_convert_"):
            await self.show_conversion(client, callback_query)
        elif data.startswith("economy_achievements_"):
            await self.show_achievements(client, callback_query)
        elif data.startswith("economy_daily_"):
            await self.show_daily_bonus(client, callback_query)
        elif data.startswith("economy_leaderboard_"):
            await self.show_leaderboard(client, callback_query)
        elif data.startswith("economy_profile_"):
            await self.show_profile(client, callback_query)
        elif data.startswith("economy_settings_"):
            await self.show_settings(client, callback_query)
        elif data.startswith("economy_charts_"):
            await self.show_chart_menu(client, callback_query)
        elif data.startswith("economy_create_currency_"):
            await self.show_create_currency(client, callback_query)
        elif data.startswith("economy_create_new_currency_"):
            await self.currency_manager.show_create_new_currency_form(client, callback_query)
        elif data.startswith("economy_edit_currency_"):
            await self.show_edit_currency(client, callback_query)
        elif data.startswith("economy_delete_currency_"):
            await self.show_delete_currency(client, callback_query)
        elif data.startswith("economy_confirm_delete_"):
            await self.confirm_delete_currency(client, callback_query)
        elif data.startswith("economy_info_"):
            await self.show_info(client, callback_query)
        elif data.startswith("economy_no_group_currency_"):
            await self.show_no_currency_message(client, callback_query, "group")
        elif data.startswith("economy_no_nc_"):
            await self.show_no_currency_message(client, callback_query, "nc")
        elif data.startswith("economy_market_analysis_"):
            await self.show_market_analysis(client, callback_query)
        elif data.startswith("economy_chart_"):
            await self.show_chart_menu(client, callback_query)
        elif data.startswith("economy_generate_chart_"):
            await self.generate_chart(client, callback_query)
        elif data.startswith("economy_back_"):
            await self.show_main_menu_callback(client, callback_query)
    
    async def show_conversion(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        group_currency = await EconomyDB.get_group_currency(chat_id)
        
        currency_symbol = group_currency["currency_symbol"]
        exchange_rate = group_currency["exchange_rate_to_nc"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        has_group_currency = balance['group_currency'] > 0
        has_neon_coins = balance['neon_coins'] > 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –≤–∞–ª—é—Ç
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –≤ NC
        if has_group_currency:
            buttons.append([
                InlineKeyboardButton(
                    f"{currency_symbol} ‚Üí NC",
                    callback_data=f"economy_convert_to_nc_{chat_id}"
                )
            ])
        else:
            buttons.append([
                InlineKeyboardButton(
                    f"‚ùå {currency_symbol} ‚Üí NC",
                    callback_data=f"economy_no_group_currency_{chat_id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ NC –≤ –≥—Ä—É–ø–ø–æ–≤—É—é –≤–∞–ª—é—Ç—É
        if has_neon_coins:
            buttons.append([
                InlineKeyboardButton(
                    f"NC ‚Üí {currency_symbol}",
                    callback_data=f"economy_convert_to_group_{chat_id}"
                )
            ])
        else:
            buttons.append([
                InlineKeyboardButton(
                    f"‚ùå NC ‚Üí {currency_symbol}",
                    callback_data=f"economy_no_nc_{chat_id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        buttons.append([
            InlineKeyboardButton(
                f"üîô {lang.get('economy_back')}",
                callback_data=f"economy_back_{chat_id}"
            )
        ])
        
        keyboard = InlineKeyboardMarkup(buttons)
        
        text = f"""
üîÑ <b>{lang.get('economy_conversion')}</b>

üí∞ <b>{lang.get('economy_your_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>

üìà <b>{lang.get('economy_current_rate')}:</b>
‚Ä¢ 1 {currency_symbol} = {exchange_rate:.2f} NC
‚Ä¢ 1 NC = {1/exchange_rate:.2f} {currency_symbol}

{lang.get('economy_choose_conversion')}:
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_no_currency_message(self, client: Client, callback_query: CallbackQuery, currency_type: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –≤–∞–ª—é—Ç—ã"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        group_currency = await EconomyDB.get_group_currency(chat_id)
        currency_symbol = group_currency["currency_symbol"]
        
        if currency_type == "group":
            message = f"‚ùå {lang.get('economy_no_group_currency', '–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–∞–ª—é—Ç—ã')} {currency_symbol}!"
            button_text = f"‚ùå {currency_symbol} ‚Üí NC"
        else:  # nc
            message = f"‚ùå {lang.get('economy_no_nc', '–£ –≤–∞—Å –Ω–µ—Ç NC')}!"
            button_text = f"‚ùå NC ‚Üí {currency_symbol}"
        
        await callback_query.answer(message, show_alert=True)
    
    async def show_market_analysis(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        try:
            from .advanced_pricing import advanced_pricing
            analysis = await advanced_pricing.get_market_analysis(chat_id)
            
            if "error" in analysis:
                await callback_query.answer(f"‚ùå {analysis['error']}", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            text = f"""
üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤–∞–ª—é—Ç—ã</b>

üí∞ <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {analysis['current_rate']:.4f} NC
üìà <b>–°—Ç–∞—Ç—É—Å:</b> {analysis['status']}
üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> {analysis['recommendation']}

üìã <b>–§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è:</b>
‚Ä¢ üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {analysis['factors']['activity']}
‚Ä¢ üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {analysis['factors']['supply']}
‚Ä¢ ‚è∞ –í–æ–∑—Ä–∞—Å—Ç: {analysis['factors']['age']}
‚Ä¢ üî• –°–ø—Ä–æ—Å: {analysis['factors']['demand']}
‚Ä¢ üìä –¢—Ä–µ–Ω–¥: {analysis['factors']['trend']}

üèÜ <b>–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {analysis['total_score']}/1.0
            """
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        f"üîô {lang.get('economy_back')}",
                        callback_data=f"economy_back_{chat_id}"
                    )
                ]
            ])
            
            await callback_query.edit_message_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞", show_alert=True)
    
    async def show_chart_menu(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        text = """
üìä <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã:
        """
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üìà –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞",
                    callback_data=f"economy_generate_chart_market_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å",
                    callback_data=f"economy_generate_chart_portfolio_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "üè¶ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç",
                    callback_data=f"economy_generate_chart_comparison_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_back_{chat_id}"
                )
            ]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def generate_chart(self, client: Client, callback_query: CallbackQuery):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await callback_query.edit_message_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
            
            from .chart_generator import chart_generator
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
            if "market" in callback_query.data:
                chart_buffer = await chart_generator.generate_market_analysis_chart(chat_id)
                caption = "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤–∞–ª—é—Ç—ã"
            elif "portfolio" in callback_query.data:
                chart_buffer = await chart_generator.generate_user_portfolio_chart(chat_id, user_id)
                caption = "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å"
            elif "comparison" in callback_query.data:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –≤–∞–ª—é—Ç–∞–º–∏
                from .database import EconomyDB
                cursor = db.group_currencies.find({"is_active": True}).limit(5)
                groups = await cursor.to_list(length=5)
                chat_ids = [group["_id"] for group in groups]
                
                if not chat_ids:
                    await callback_query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                    return
                
                chart_buffer = await chart_generator.generate_currency_comparison_chart(chat_ids)
                caption = "üè¶ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞–ª—é—Ç –≥—Ä—É–ø–ø"
            else:
                await callback_query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            await client.send_photo(
                chat_id=chat_id,
                photo=chart_buffer,
                caption=caption,
                reply_to_message_id=callback_query.message.reply_to_message_id if callback_query.message.reply_to_message_id else None
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≥—Ä–∞—Ñ–∏–∫–æ–≤
            await self.show_chart_menu(client, callback_query)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")
    
    async def show_convert_to_nc(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ NC"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        logger.info(f"show_convert_to_nc: Starting for user {user_id} in chat {chat_id}")
        
        try:
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            logger.info(f"show_convert_to_nc: Language loaded: {lang_code}")
            
            balance = await EconomyDB.get_user_balance(chat_id, user_id)
            logger.info(f"show_convert_to_nc: Balance loaded: {balance}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
            if balance['group_currency'] <= 0:
                await callback_query.answer(f"‚ùå {lang.get('economy_no_group_currency', '–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–∞–ª—é—Ç—ã')}!", show_alert=True)
                return
            
            group_currency = await EconomyDB.get_group_currency(chat_id)
            logger.info(f"show_convert_to_nc: Group currency loaded: {group_currency}")
            
            currency_symbol = group_currency["currency_symbol"]
            exchange_rate = group_currency["exchange_rate_to_nc"]
            logger.info(f"show_convert_to_nc: Currency symbol: {currency_symbol}, Exchange rate: {exchange_rate}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("10", callback_data=f"economy_convert_nc_amount_{chat_id}_10"),
                    InlineKeyboardButton("50", callback_data=f"economy_convert_nc_amount_{chat_id}_50"),
                    InlineKeyboardButton("100", callback_data=f"economy_convert_nc_amount_{chat_id}_100")
                ],
                [
                    InlineKeyboardButton("500", callback_data=f"economy_convert_nc_amount_{chat_id}_500"),
                    InlineKeyboardButton("1000", callback_data=f"economy_convert_nc_amount_{chat_id}_1000"),
                    InlineKeyboardButton(lang.get('economy_all', '–í—Å–µ'), callback_data=f"economy_convert_nc_amount_{chat_id}_all")
                ],
                [
                    InlineKeyboardButton(
                        f"üîô {lang.get('economy_back')}",
                        callback_data=f"economy_convert_{chat_id}"
                    )
                ]
            ])
            logger.info(f"show_convert_to_nc: Keyboard created")
            
            text = f"""
üîÑ <b>{lang.get('economy_convert_to_nc', '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')} {currency_symbol} ‚Üí NC</b>

üí∞ <b>{lang.get('economy_your_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>

üìà <b>{lang.get('economy_exchange_rate_short')}:</b> 1 {currency_symbol} = {exchange_rate:.2f} NC

üí° <b>{lang.get('economy_select_amount', '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')}:</b>
            """
            logger.info(f"show_convert_to_nc: Text created")
            
            logger.info(f"Showing convert to NC menu for user {user_id} in chat {chat_id}")
            try:
                await callback_query.edit_message_text(text, reply_markup=keyboard)
                logger.info(f"show_convert_to_nc: Message sent successfully")
            except Exception as edit_error:
                if "MESSAGE_NOT_MODIFIED" in str(edit_error):
                    logger.debug(f"show_convert_to_nc: Message not modified (same content), ignoring")
                    await callback_query.answer()
                else:
                    raise edit_error
            
        except Exception as e:
            logger.error(f"show_convert_to_nc: Error: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!", show_alert=True)
    
    async def show_convert_to_group(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—É—é –≤–∞–ª—é—Ç—É"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        balance = await EconomyDB.get_user_balance(chat_id, user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è NC
        if balance['neon_coins'] <= 0:
            await callback_query.answer(f"‚ùå {lang.get('economy_no_nc', '–£ –≤–∞—Å –Ω–µ—Ç NC')}!", show_alert=True)
            return
        
        group_currency = await EconomyDB.get_group_currency(chat_id)
        
        currency_symbol = group_currency["currency_symbol"]
        exchange_rate = group_currency["exchange_rate_to_nc"]
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("10", callback_data=f"economy_convert_group_amount_{chat_id}_10"),
                InlineKeyboardButton("50", callback_data=f"economy_convert_group_amount_{chat_id}_50"),
                InlineKeyboardButton("100", callback_data=f"economy_convert_group_amount_{chat_id}_100")
            ],
            [
                InlineKeyboardButton("500", callback_data=f"economy_convert_group_amount_{chat_id}_500"),
                InlineKeyboardButton("1000", callback_data=f"economy_convert_group_amount_{chat_id}_1000"),
                InlineKeyboardButton(lang.get('economy_all', '–í—Å–µ'), callback_data=f"economy_convert_group_amount_{chat_id}_all")
            ],
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_convert_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üîÑ <b>{lang.get('economy_convert_to_group', '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')} NC ‚Üí {currency_symbol}</b>

üí∞ <b>{lang.get('economy_your_balance')}:</b>
‚Ä¢ {currency_symbol}: <code>{balance['group_currency']:.2f}</code>
‚Ä¢ NC: <code>{balance['neon_coins']:.2f}</code>

üìà <b>{lang.get('economy_exchange_rate_short')}:</b> 1 NC = {1/exchange_rate:.2f} {currency_symbol}

üí° <b>{lang.get('economy_select_amount', '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')}:</b>
        """
        
        logger.info(f"Showing convert to group menu for user {user_id} in chat {chat_id}")
        try:
            await callback_query.edit_message_text(text, reply_markup=keyboard)
        except Exception as edit_error:
            if "MESSAGE_NOT_MODIFIED" in str(edit_error):
                logger.debug(f"show_convert_to_group: Message not modified (same content), ignoring")
                await callback_query.answer()
            else:
                raise edit_error
    
    async def show_achievements(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        await self.achievement_manager.show_achievements(client, callback_query)
    
    async def show_daily_bonus(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
        await self.daily_bonus_manager.show_daily_bonus(client, callback_query)
    
    async def show_leaderboard(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (–∏—Å–∫–ª—é—á–∞—è –≤—Å–µ—Ö –±–æ—Ç–æ–≤)"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        all_users = await EconomyDB.get_top_users(chat_id, 50)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        group_currency = await EconomyDB.get_group_currency(chat_id)
        
        currency_symbol = group_currency["currency_symbol"]
        
        text = f"""
üèÜ <b>{lang.get('economy_leaderboard', '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}</b>

üí∞ <b>{lang.get('economy_top_10_earners')}:</b>
        """
        
        real_users = []
        position = 1
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_data in all_users:
            if position > 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–æ–ø-10
                break
                
            try:
                user = await client.get_users(user_data["user_id"])
                
                # –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ—Ö –±–æ—Ç–æ–≤
                if user.is_bot:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
                if user_data.get('total_earned', 0) <= 0:
                    continue
                
                username = user.username or user.first_name
                real_users.append({
                    'position': position,
                    'username': username,
                    'total_earned': user_data['total_earned']
                })
                position += 1
                
            except Exception as e:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å
                continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        if not real_users:
            text += f"\n\nüìù <i>{lang.get('economy_no_users')}</i>"
        else:
            for user_info in real_users:
                text += f"\n{user_info['position']}. <b>{user_info['username']}</b> - <code>{user_info['total_earned']:,}</code> {currency_symbol}"
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_back_{chat_id}"
                )
            ]
        ])
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_profile(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""
        await self.profile_manager.show_profile(client, callback_query)
    
    async def show_settings(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = await client.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await callback_query.answer(
                    lang.get('economy_admin_only')
                )
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return
        
        group_currency = await EconomyDB.get_group_currency(chat_id)
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üìä {lang.get('economy_update_rate')}",
                    callback_data=f"economy_update_rate_{chat_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_back_{chat_id}"
                )
            ]
        ])
        
        text = f"""
‚öôÔ∏è <b>{lang.get('economy_settings')}</b>

üè¶ <b>{lang.get('economy_group_currency')}:</b> {group_currency['currency_name']} ({group_currency['currency_symbol']})
üìà <b>{lang.get('economy_rate_to_nc')}:</b> {group_currency['exchange_rate_to_nc']:.2f}
üìä <b>{lang.get('economy_group_activity')}:</b> {group_currency['daily_activity_score']}
üïê <b>{lang.get('economy_last_update')}:</b> {group_currency['last_rate_update'].strftime('%d.%m.%Y %H:%M')}
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_create_currency(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        await self.currency_manager.show_create_currency(client, callback_query)
    
    async def show_edit_currency(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = await client.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await callback_query.answer(
                    lang.get('economy_admin_only')
                )
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_create_currency_{chat_id}"
                )
            ]
        ])
        
        text = f"""
‚úèÔ∏è <b>{lang.get('economy_edit_currency_title')}</b>

‚ö†Ô∏è <b>{lang.get('economy_important')}:</b> {lang.get('economy_currency_cannot_change')}

{lang.get('economy_to_change_currency')}:
1. {lang.get('economy_delete_current')}
2. {lang.get('economy_create_new')}

{lang.get('economy_will_delete_data')}
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def show_delete_currency(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = await client.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await callback_query.answer(
                    lang.get('economy_admin_only')
                )
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"‚úÖ {lang.get('economy_confirm_delete')}",
                    callback_data=f"economy_confirm_delete_{chat_id}"
                ),
                InlineKeyboardButton(
                    f"‚ùå {lang.get('economy_cancel_delete')}",
                    callback_data=f"economy_create_currency_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üóëÔ∏è <b>{lang.get('economy_delete_currency_title')}</b>

‚ö†Ô∏è <b>{lang.get('economy_warning')}</b> {lang.get('economy_this_action')}:
‚Ä¢ {lang.get('economy_delete_currency_forever')}
‚Ä¢ {lang.get('economy_delete_user_balances')}
‚Ä¢ {lang.get('economy_delete_transaction_history')}
‚Ä¢ {lang.get('economy_delete_user_achievements')}

‚ùå <b>{lang.get('economy_action_irreversible')}</b>

{lang.get('economy_confirm_delete_question')}
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def confirm_delete_currency(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        chat_id = int(callback_query.data.split("_")[-1])
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É
        success, message = await self.currency_manager.delete_currency(chat_id, user_id)
        
        if success:
            await callback_query.answer(f"‚úÖ {lang.get('economy_currency_deleted')}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
            await self.show_main_menu(client, callback_query.message)
        else:
            await callback_query.answer(f"‚ùå {message}")
    
    async def show_info(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        chat_id = callback_query.message.chat.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_back_{chat_id}"
                )
            ]
        ])
        
        text = f"""
‚ÑπÔ∏è <b>{lang.get('economy_info_title')}</b>

üí∞ <b>{lang.get('economy_main_features')}:</b>
‚Ä¢ {lang.get('economy_create_group_currency')} ({lang.get('economy_max_4_symbols')})
‚Ä¢ {lang.get('economy_daily_bonuses')}
‚Ä¢ {lang.get('economy_achievements_system')}
‚Ä¢ {lang.get('economy_currency_conversion')}
‚Ä¢ {lang.get('economy_leaderboard')}

üîÑ <b>{lang.get('economy_exchange_rate')}:</b>
‚Ä¢ {lang.get('economy_auto_calculated')}
‚Ä¢ {lang.get('economy_cannot_be_expensive')}
‚Ä¢ {lang.get('economy_updates_daily')}

üéØ <b>{lang.get('economy_how_to_earn')}:</b>
‚Ä¢ {lang.get('economy_daily_bonuses')}
‚Ä¢ {lang.get('economy_complete_achievements')}
‚Ä¢ {lang.get('economy_participate_games')}
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def handle_convert_nc_amount(self, client: Client, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–∞–ª—é—Ç—ã –≤ NC"""
        try:
            data = callback_query.data
            chat_id = callback_query.message.chat.id
            user_id = callback_query.from_user.id
            logger.info(f"Processing convert NC amount: {data} for user {user_id} in chat {chat_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏ —Å—É–º–º—É –∏–∑ callback_data
            parts = data.split("_")
            chat_id_from_callback = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ chat_id
            amount_str = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ —Å—É–º–º–∞
            logger.info(f"Parsed callback data: parts={parts}, chat_id={chat_id_from_callback}, amount_str={amount_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
            if chat_id_from_callback != chat_id:
                await callback_query.answer(f"‚ùå {lang.get('economy_wrong_chat_error', '–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞')}!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                await callback_query.answer(f"‚ùå {lang.get('economy_not_setup', '–í–∞–ª—é—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')}!", show_alert=True)
                return
            
            balance = await EconomyDB.get_user_balance(chat_id, user_id)
            currency_symbol = group_currency["currency_symbol"]
            exchange_rate = group_currency["exchange_rate_to_nc"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            if amount_str == "all":
                amount = balance["group_currency"]
            else:
                try:
                    amount = float(amount_str)
                except ValueError:
                    await callback_query.answer(f"‚ùå {lang.get('economy_invalid_amount', '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞')}!", show_alert=True)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            if amount <= 0:
                await callback_query.answer(f"‚ùå {lang.get('economy_amount_zero_error', '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')}!", show_alert=True)
                return
            
            if balance["group_currency"] < amount:
                await callback_query.answer(f"‚ùå {lang.get('economy_insufficient_funds', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')}! {lang.get('economy_your_balance', '–£ –≤–∞—Å')}: {balance['group_currency']:.2f} {currency_symbol}", show_alert=True)
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NC
            nc_amount = amount * exchange_rate
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            success = await EconomyDB.convert_currency(
                chat_id, user_id, amount, nc_amount, 
                currency_symbol, "NC", "group_to_nc"
            )
            
            if success:
                await callback_query.answer(f"‚úÖ {lang.get('economy_converted', '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ')}: {amount:.2f} {currency_symbol} ‚Üí {nc_amount:.2f} NC")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∏–∑ –ë–î)
                try:
                    await self.show_conversion(client, callback_query)
                except Exception as e:
                    logger.error(f"Error showing conversion menu after conversion: {e}")
                    # —Ö–æ—Ç—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, —É–≤–µ–¥–æ–º–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –º–µ–Ω—é –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
                    await callback_query.answer(f"‚úÖ {lang.get('economy_conversion_success_menu_error', '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é')}.", show_alert=True)
            else:
                await callback_query.answer(f"‚ùå {lang.get('economy_conversion_failed', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')}!", show_alert=True)
                
        except Exception as e:
            logger.error(f"Error in handle_convert_nc_amount: {e}")
            await callback_query.answer(f"‚ùå {lang.get('economy_general_error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')}!", show_alert=True)
    
    async def handle_convert_group_amount(self, client: Client, callback_query: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ NC –≤ –≥—Ä—É–ø–ø–æ–≤—É—é –≤–∞–ª—é—Ç—É"""
        try:
            data = callback_query.data
            chat_id = callback_query.message.chat.id
            user_id = callback_query.from_user.id
            logger.info(f"Processing convert group amount: {data} for user {user_id} in chat {chat_id}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —è–∑—ã–∫
            lang_code = await get_group_language(chat_id)
            lang = load_language(lang_code)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏ —Å—É–º–º—É –∏–∑ callback_data
            parts = data.split("_")
            chat_id_from_callback = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ chat_id
            amount_str = parts[-1]  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - —ç—Ç–æ —Å—É–º–º–∞
            logger.info(f"Parsed callback data: parts={parts}, chat_id={chat_id_from_callback}, amount_str={amount_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
            if chat_id_from_callback != chat_id:
                await callback_query.answer(f"‚ùå {lang.get('economy_wrong_chat_error', '–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞')}!", show_alert=True)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –∏ –±–∞–ª–∞–Ω—Å–µ
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                await callback_query.answer(f"‚ùå {lang.get('economy_not_setup', '–í–∞–ª—é—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')}!", show_alert=True)
                return
            
            balance = await EconomyDB.get_user_balance(chat_id, user_id)
            currency_symbol = group_currency["currency_symbol"]
            exchange_rate = group_currency["exchange_rate_to_nc"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            if amount_str == "all":
                amount = balance["neon_coins"]
            else:
                try:
                    amount = float(amount_str)
                except ValueError:
                    await callback_query.answer(f"‚ùå {lang.get('economy_invalid_amount', '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞')}!", show_alert=True)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            if amount <= 0:
                await callback_query.answer(f"‚ùå {lang.get('economy_amount_zero_error', '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')}!", show_alert=True)
                return
            
            if balance["neon_coins"] < amount:
                await callback_query.answer(f"‚ùå {lang.get('economy_insufficient_nc', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NC')}! {lang.get('economy_your_balance', '–£ –≤–∞—Å')}: {balance['neon_coins']:.2f} NC", show_alert=True)
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
            group_amount = amount / exchange_rate
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            success = await EconomyDB.convert_currency(
                chat_id, user_id, amount, group_amount, 
                "NC", currency_symbol, "nc_to_group"
            )
            
            if success:
                await callback_query.answer(f"‚úÖ {lang.get('economy_converted', '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ')}: {amount:.2f} NC ‚Üí {group_amount:.2f} {currency_symbol}")
                try:
                    await self.show_conversion(client, callback_query)
                except Exception as e:
                    logger.error(f"Error showing conversion menu after conversion: {e}")
                    await callback_query.answer(f"‚úÖ {lang.get('economy_conversion_success_menu_error', '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é')}.", show_alert=True)
            else:
                await callback_query.answer(f"‚ùå {lang.get('economy_conversion_failed', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')}!", show_alert=True)
                
        except Exception as e:
            logger.error(f"Error in handle_convert_group_amount: {e}")
            await callback_query.answer(f"‚ùå {lang.get('economy_general_error', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')}!", show_alert=True)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
economy_manager = EconomyManager()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —ç–∫–æ–Ω–æ–º–∏–∫—É
@app.on_message(filters.command("economy") & filters.group, group=20)
async def economy_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É"""
    await economy_manager.show_main_menu(client, message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
@app.on_message(filters.command("profile") & filters.group, group=20)
async def profile_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    lang_code = await get_group_language(chat_id)
    lang = load_language(lang_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞
    group_currency = await EconomyDB.get_group_currency(chat_id)
    if not group_currency:
        return await message.reply(
            f"<blockquote>{lang.get('economy_not_setup')}</blockquote>"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ ProfileManager
    from .profile import ProfileManager
    profile_manager = ProfileManager()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback_query –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
    class FakeCallbackQuery:
        def __init__(self, message, chat_id):
            self.message = message
            self.data = f"economy_profile_{chat_id}"
    
    fake_callback = FakeCallbackQuery(message, chat_id)
    await profile_manager.show_profile(client, fake_callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
@app.on_callback_query(filters.regex("^economy_"), group=20)
async def economy_callback_handler(client: Client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ —ç–∫–æ–Ω–æ–º–∏–∫–∏"""
    try:
        await economy_manager.handle_callback(client, callback_query)
    except Exception as e:
        error_message = str(e)
        if "MESSAGE_NOT_MODIFIED" in error_message:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            logger.debug(f"Message not modified (ignored): {error_message}")
            await callback_query.answer()
        else:
            logger.error(f"Error in economy callback handler: {e}")
            try:
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
            except:
                pass

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
# –ö–æ–º–∞–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
