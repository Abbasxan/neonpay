"""
Currency Management Module
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞–ª—é—Ç–∞–º–∏
"""

import logging
import re
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from pyrogram.enums import ChatMemberStatus
from config import app
from language import load_language, get_group_language
from .database import EconomyDB

logger = logging.getLogger(__name__)

class CurrencyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∞–ª—é—Ç"""
    
    async def show_create_currency(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = await client.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return await callback_query.answer(
                    lang.get('economy_admin_only')
                )
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
        group_currency = await EconomyDB.get_group_currency(chat_id)
        
        if group_currency:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–ª—é—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            currency_name = group_currency["currency_name"]
            currency_symbol = group_currency["currency_symbol"]
            exchange_rate = group_currency["exchange_rate_to_nc"]
            activity_score = group_currency.get("daily_activity_score", 0)
            
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        f"‚úèÔ∏è {lang.get('economy_edit_currency')}",
                        callback_data=f"economy_edit_currency_{chat_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        f"üóëÔ∏è {lang.get('economy_delete_currency')}",
                        callback_data=f"economy_delete_currency_{chat_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        f"üîô {lang.get('economy_back')}",
                        callback_data=f"economy_back_{chat_id}"
                    )
                ]
            ])
            
            text = f"""
üè¶ <b>{lang.get('economy_currency_settings')}</b>

üìä <b>{lang.get('economy_current_settings')}:</b>
‚Ä¢ {lang.get('economy_currency_name')}: <b>{currency_name}</b>
‚Ä¢ {lang.get('economy_currency_symbol')}: <b>{currency_symbol}</b>
‚Ä¢ {lang.get('economy_exchange_rate_short')}: <b>{exchange_rate:.2f}</b>
‚Ä¢ {lang.get('economy_activity_score')}: <b>{activity_score}</b>

üîÑ <b>{lang.get('economy_auto_rate_update')}:</b>
{lang.get('economy_rate_updates_daily')}
            """
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(
                        f"üìù {lang.get('economy_create_new_currency')}",
                        callback_data=f"economy_create_new_currency_{chat_id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        f"üîô {lang.get('economy_back')}",
                        callback_data=f"economy_back_{chat_id}"
                    )
                ]
            ])
            
            text = f"""
üè¶ <b>{lang.get('economy_create_currency_title')}</b>

üìã <b>{lang.get('economy_requirements')}:</b>
‚Ä¢ {lang.get('economy_currency_name_requirements')}
‚Ä¢ {lang.get('economy_currency_symbol_requirements')}
‚Ä¢ {lang.get('economy_admin_only_create')}

üí° <b>{lang.get('economy_examples')}:</b>
‚Ä¢ {lang.get('economy_currency_name')}: "Neon Coins", {lang.get('economy_currency_symbol')}: "NC"
‚Ä¢ {lang.get('economy_currency_name')}: "Group Gold", {lang.get('economy_currency_symbol')}: "GG"
‚Ä¢ {lang.get('economy_currency_name')}: "Chat Cash", {lang.get('economy_currency_symbol')}: "CC"

‚ö†Ô∏è <b>{lang.get('economy_important')}:</b> {lang.get('economy_currency_one_time')}

{lang.get('economy_click_button_create')}
            """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def create_currency(self, chat_id: int, user_id: int, currency_name: str, currency_symbol: str) -> tuple[bool, str]:
        """–°–æ–∑–¥–∞—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–ª—é—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
        existing_currency = await EconomyDB.get_group_currency(chat_id)
        if existing_currency:
            return False, lang.get('economy_currency_already_exists')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
        if not currency_name or len(currency_name) > 10:
            return False, lang.get('economy_currency_name_validation')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã
        if not currency_symbol or len(currency_symbol) > 4:
            return False, lang.get('economy_currency_symbol_validation')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
        if not re.match(r'^[A-Za-z0-9]+$', currency_symbol):
            return False, lang.get('economy_currency_symbol_format')
        
        # –°–æ–∑–¥–∞–µ–º –≤–∞–ª—é—Ç—É
        try:
            await EconomyDB.create_group_currency(chat_id, currency_name, currency_symbol, user_id)
            return True, lang.get('economy_currency_created', '–í–∞–ª—é—Ç–∞ \'{name}\' ({symbol}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!').format(name=currency_name, symbol=currency_symbol)
        except Exception as e:
            logger.error(f"Error creating currency: {e}")
            return False, lang.get('economy_currency_creation_error')
    
    async def update_exchange_rate(self, chat_id: int, user_id: int) -> tuple[bool, str]:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            from config import app
            member = await app.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return False, lang.get('economy_admin_only')
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return False, lang.get('economy_rate_update_error')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ
        group_currency = await EconomyDB.get_group_currency(chat_id)
        if not group_currency:
            return False, lang.get('economy_currency_not_created')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        from .advanced_pricing import advanced_pricing
        new_rate = await advanced_pricing.calculate_dynamic_rate(chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å
        await EconomyDB.update_exchange_rate(chat_id, new_rate)
        
        return True, lang.get('economy_rate_updated').format(symbol=group_currency['currency_symbol'], rate=new_rate)
    
    async def get_exchange_info(self, chat_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –æ–±–º–µ–Ω–∞"""
        group_currency = await EconomyDB.get_group_currency(chat_id)
        if not group_currency:
            return None
        
        return {
            "currency_name": group_currency["currency_name"],
            "currency_symbol": group_currency["currency_symbol"],
            "exchange_rate": group_currency["exchange_rate_to_nc"],
            "activity_score": group_currency.get("daily_activity_score", 0),
            "last_update": group_currency["last_rate_update"]
        }
    
    async def show_create_new_currency_form(self, client: Client, callback_query: CallbackQuery):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≤–∞–ª—é—Ç—ã"""
        chat_id = callback_query.message.chat.id
        user_id = callback_query.from_user.id
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    f"üîô {lang.get('economy_back')}",
                    callback_data=f"economy_create_currency_{chat_id}"
                )
            ]
        ])
        
        text = f"""
üìù <b>{lang.get('economy_create_new_currency_form')}</b>

{lang.get('economy_currency_creation_format')}
<code>/create_currency &lt;–Ω–∞–∑–≤–∞–Ω–∏–µ&gt; &lt;—Å–∏–º–≤–æ–ª&gt;</code>

üìã <b>{lang.get('economy_examples')}:</b>
‚Ä¢ <code>/create_currency Neon Coins NC</code>
‚Ä¢ <code>/create_currency Group Gold GG</code>
‚Ä¢ <code>/create_currency Chat Cash CC</code>

‚ö†Ô∏è <b>{lang.get('economy_requirements')}:</b>
‚Ä¢ {lang.get('economy_currency_name_requirements')}
‚Ä¢ {lang.get('economy_currency_symbol_requirements')}
‚Ä¢ {lang.get('economy_currency_one_time')}
        """
        
        await callback_query.edit_message_text(text, reply_markup=keyboard)
    
    async def delete_currency(self, chat_id: int, user_id: int) -> tuple[bool, str]:
        """–£–¥–∞–ª–∏—Ç—å –≤–∞–ª—é—Ç—É –≥—Ä—É–ø–ø—ã"""
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –≥—Ä—É–ø–ø—ã
        lang_code = await get_group_language(chat_id)
        lang = load_language(lang_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            from config import app
            member = await app.get_chat_member(chat_id, user_id)
            if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
                return False, lang.get('economy_admin_only')
        except Exception as e:
            logger.error(f"Error checking admin status: {e}")
            return False, lang.get('economy_rate_update_error')
        
        # –£–¥–∞–ª—è–µ–º –≤–∞–ª—é—Ç—É
        try:
            from config import db
            await db.group_currencies.delete_one({"_id": chat_id})
            return True, lang.get('economy_currency_deleted')
        except Exception as e:
            logger.error(f"Error deleting currency: {e}")
            return False, lang.get('economy_currency_deletion_error')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
@app.on_message(filters.command("create_currency") & filters.group, group=20)
async def create_currency_command(client: Client, message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
    chat_id = message.chat.id
    user_id = message.from_user.id
    lang_code = await get_group_language(chat_id)
    lang = load_language(lang_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    try:
        member = await client.get_chat_member(chat_id, user_id)
        if member.status not in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]:
            admin_only_text = lang.get('economy_admin_only', '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∞–ª—é—Ç—É')
            return await message.reply(f"‚ùå {admin_only_text}")
    except Exception as e:
        logger.error(f"Error checking admin status: {e}")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()[1:]
    if len(args) < 2:
        usage_text = lang.get('economy_create_currency_usage', '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /create_currency <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å–∏–º–≤–æ–ª>')
        return await message.reply(f"‚ùå {usage_text}")
    
    currency_name = " ".join(args[:-1])  # –í—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    currency_symbol = args[-1].upper()   # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - —Å–∏–º–≤–æ–ª
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª—é—Ç—É
    currency_manager = CurrencyManager()
    success, result_message = await currency_manager.create_currency(chat_id, user_id, currency_name, currency_symbol)
    
    if success:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        try:
            await message.delete()
        except Exception as e:
            logger.warning(f"Could not delete message: {e}")
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        # –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é —ç–∫–æ–Ω–æ–º–∏–∫–∏ —á–µ—Ä–µ–∑ edit_message_text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —ç–∫–æ–Ω–æ–º–∏–∫–∏
        from .economy import economy_manager
        await economy_manager.show_main_menu(client, message)
    else:
        await message.reply(f"‚ùå {result_message}")

# –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
