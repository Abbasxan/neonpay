"""
Automatic Rate Updater Module
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞
"""

import logging
import asyncio
from datetime import datetime, timedelta
from config import app, db
from .database import EconomyDB

logger = logging.getLogger(__name__)

class AutoRateUpdater:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–±–Ω–æ–≤–ª—è—Ç–µ–ª—å –∫—É—Ä—Å–∞"""
    
    def __init__(self):
        self.is_running = False
    
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if self.is_running:
            return
        
        self.is_running = True
        logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∑–∞–ø—É—â–µ–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(self._update_loop())
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.is_running = False
        logger.info("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    async def _update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        while self.is_running:
            try:
                await self._update_all_rates()
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                await asyncio.sleep(86400)  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º —á–∞—Å –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                await asyncio.sleep(3600)
    
    async def _update_all_rates(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —Å –≤–∞–ª—é—Ç–∞–º–∏
            cursor = db.group_currencies.find({"is_active": True})
            groups = await cursor.to_list(length=None)
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è {len(groups)} –≥—Ä—É–ø–ø")
            
            for group in groups:
                chat_id = group["_id"]
                await self._update_group_rate(chat_id)
            
            logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
    
    async def _update_group_rate(self, chat_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            from .advanced_pricing import advanced_pricing
            new_rate = await advanced_pricing.calculate_dynamic_rate(chat_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å
            await EconomyDB.update_exchange_rate(chat_id, new_rate)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ 0)
            await EconomyDB.update_activity_score(chat_id, 0)
            
            logger.info(f"üìà –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {new_rate:.4f} NC (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}: {e}")
    
    async def add_activity_point(self, chat_id: int, points: int = 1):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        try:
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                return
            
            current_score = group_currency.get("daily_activity_score", 0)
            new_score = current_score + points
            
            await EconomyDB.update_activity_score(chat_id, new_score)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def get_activity_score(self, chat_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            group_currency = await EconomyDB.get_group_currency(chat_id)
            if not group_currency:
                return 0
            
            return group_currency.get("daily_activity_score", 0)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return 0

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_updater = AutoRateUpdater()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
async def track_message_activity(chat_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await auto_updater.add_activity_point(chat_id, 1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
async def track_daily_bonus_activity(chat_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤"""
    try:
        await auto_updater.add_activity_point(chat_id, 5)  # –ë–æ–Ω—É—Å—ã –¥–∞—é—Ç –±–æ–ª—å—à–µ –æ—á–∫–æ–≤
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–Ω—É—Å–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
async def track_achievement_activity(chat_id: int):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    try:
        await auto_updater.add_activity_point(chat_id, 3)  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–∞—é—Ç —Å—Ä–µ–¥–Ω–∏–µ –æ—á–∫–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
