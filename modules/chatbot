# modules/chatbot.py
import time
import random
import asyncio
import logging
from collections import defaultdict, deque
import aiohttp
from pyrogram.types import Message
from pyrogram import filters
from pyrogram.enums import ChatAction, ChatType
from config import OWNER_ID, app, db

logger = logging.getLogger(__name__)

MAX_HISTORY = 10
DEFAULT_MODEL = "deepseek-ai/DeepSeek-V3-0324"
histories = defaultdict(lambda: deque(maxlen=MAX_HISTORY))


def add_message(chat_id, role, content):
    histories[chat_id].append({"role": role, "content": content})


def build_messages(chat_id, new_message):
    system_msg = {
        "role": "system",
        "content": (
            "Qrupda ədəbi və təmiz mühiti qorumaq sənin vəzifəndir. "
            "Hərdən səndə söhbətə qoşul qrupda gör nə danışırlar səndə öz fikrini bildir və səhv danışırlarsa kömək elə. "
            "Cavabların ciddi, lakin sərt olmalıdır. Söhbəti uzatma, insan kimi qısa konkret danış. "
            "Lazımsız məlumat vermə, sualı aydın şəkildə cavablandır. Kobud və ya təhqiramiz ifadələrdən uzaq dur.\n\n"
            "Əgər soruşsa 'Səni kim yaradıb?' və ya 'Yaradıcı kimdir?' — cavab ver: 'Məni Neon Sultan yaradıb. @neonsahib'"
        )
    }
    messages = [system_msg] + list(histories[chat_id]) + [new_message]
    return messages[-(MAX_HISTORY + 1):]


async def request_ai(messages, model):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://korsany.serv00.net/api/v1/text",
                json={"messages": messages, "model": model},
                timeout=aiohttp.ClientTimeout(total=20)
            ) as resp:
                r = await resp.json()
                return r.get("response") if r.get("status") == "success" else None
    except asyncio.TimeoutError:
        logger.warning("⏳ AI cavab vermədi (timeout). Daha sonra yenidən yoxla.")
        return None
    except Exception as e:
        logger.error(f"API sorğusunda xəta baş verdi: {e}")
        return None


async def simulate_typing(client, chat_id, text):
    char_count = len(text)
    typing_speed = random.uniform(60, 80) / 60
    typing_time = min(char_count / typing_speed, 3)
    try:
        while typing_time > 0:
            await client.send_chat_action(chat_id, ChatAction.TYPING)
            await asyncio.sleep(min(4.0, typing_time))
            typing_time -= 4.0
    except Exception as e:
        logger.error(f"Yazma animasiyasında xəta: {e}")


@app.on_message(filters.command("chatbot"), group=-1)
async def chatbot_command_handler(client, message):
    chat_id = message.chat.id
    parts = message.text.split(maxsplit=1)
    if len(parts) == 1:
        return await message.reply_text("ℹ️ İstifadə: <code>/chatbot on</code> və ya <code>/chatbot off</code>")

    arg = parts[1].lower()
    if arg not in ["on", "off"]:
        return await message.reply_text("⚠️ Yalnız 'on' və ya 'off' istifadə edin.")

    enabled = arg == "on"
    await db.chatbot_settings.update_one(
        {"_id": chat_id}, {"$set": {"enabled": enabled}}, upsert=True
    )
    return await message.reply_text(
        "✅ Chatbot aktiv edildi." if enabled else "❌ Chatbot deaktiv edildi."
        )


@app.on_message(filters.text & ~filters.regex(r"^[\/.!]"), group=3)
async def chatbot_text_handler(client, message: Message):
    # Пропустить сообщения от самого себя
    if message.from_user.is_self:
        return

    chat_type = message.chat.type

    # Проверяем настройки чат-бота (включён ли он) для чата
    data = await db.chatbot_settings.find_one({"_id": message.chat.id})
    enabled = True if data is None else data.get("enabled", True)  # по умолчанию включён

    if not enabled:
        return  # если выключен — не отвечает

    # Личные сообщения — всегда отвечаем
    if chat_type == ChatType.PRIVATE:
        pass  # дальше пойдёт обычный ответ

    # Группы и супергруппы — отвечаем только если сообщение — reply на сообщение бота
    elif chat_type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        # Проверяем, что это ответ на сообщение бота
        if not message.reply_to_message:
            return
        if not message.reply_to_message.from_user or not message.reply_to_message.from_user.is_self:
            return
    else:
        # В других типах чатов (каналы и т.п.) не отвечаем
        return

    user_text = message.text or ""
    add_message(message.chat.id, "user", user_text)
    messages = build_messages(message.chat.id, {"role": "user", "content": user_text})

    await simulate_typing(client, message.chat.id, user_text)
    response = await request_ai(messages, DEFAULT_MODEL)

    if response:
        add_message(message.chat.id, "assistant", response)
        await message.reply_text(response)
    else:
        await message.reply_text("❌ Cavab alınmadı. Zəhmət olmasa sonra yenidən cəhd edin.")
        

@app.on_message(filters.new_chat_members, group=0)
async def greet_new_members(client, message):
    chat_id = message.chat.id

    # Проверка напрямую из базы
    data = await db.chatbot_settings.find_one({"_id": chat_id})
    if data and not data.get("enabled", True):
        return

    for member in message.new_chat_members:
        if member.is_bot:
            continue

        full_name = member.first_name
        if member.last_name:
            full_name += f" {member.last_name}"

        system_prompt = {
            "role": "system",
            "content": (
                "Sən Qəddar adlanan süni intellekt botusan. Qrupa yeni qoşulan istifadəçiləri ədəblə, amma ciddi şəkildə "
                "qarşılamaq sənin işindir. Səmimi, lakin ciddiyyətini qoruyan tonla danış."
            )
        }

        user_prompt = {
            "role": "user",
            "content": f"Yeni istifadəçi qrupa qoşuldu: {full_name}. Onu qarşıla və qısa tövsiyə ver."
        }

        response = await request_ai([system_prompt, user_prompt], DEFAULT_MODEL)
        if response:
            await message.reply_text(response)

