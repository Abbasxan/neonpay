import asyncio
import logging
from config import app, LOG_ID, scheduler, userbot
from pyrogram import idle
from pyrogram.errors import FloodWait
from modules.commands import set_bot_commands
from helpers.utils import create_ttl_index  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –ú–æ–∂–Ω–æ DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s'
)
logger = logging.getLogger(__name__)

async def send_log_message(message: str):
    try:
        await app.send_message(LOG_ID, message)
        logger.info(f"Log message sent: {message}")
    except Exception as e:
        logger.error(f"‚ùå Mesaj log kanalƒ±na g√∂nd…ôril…ô bilm…ôdi: {e}")

async def start_bot():
    logger.info("Bot i≈ü…ô d√º≈ü√ºr...")

    try:
        await app.start()
        logger.info("Bot started successfully")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from config import db
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        import modules
        import helpers
        import oyunlar
        import modules.economy
        import modules.botversion
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
        from modules.economy.economy import EconomyManager
        from modules.economy.database import EconomyDB
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
        await EconomyDB.initialize_database()
        
        economy_manager = EconomyManager()
        app.economy_manager = economy_manager
        logger.info("‚úÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        if userbot:
            try:
                await userbot.start()
                logger.info("‚úÖ Userbot started successfully")
            except Exception as e:
                logger.error(f"‚ùå Userbot start error: {e}")
        
    except FloodWait as e:
        logger.warning(f"‚ö†Ô∏è FloodWait x…ôtasƒ±: {e.value} saniy…ô g√∂zl…ônilir...")
        await asyncio.sleep(e.value)
        await app.start()
        logger.info("Bot restarted after FloodWait")

    try:
        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

    await create_ttl_index()
    logger.info("TTL –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")

    bot = await app.get_me()
    app.bot_info = bot  # …ôlav…ô et
    app.bot_username = bot.username

    await send_log_message("üöÄ Bot ba≈üladƒ±!")
    await set_bot_commands()
    logger.info("‚úÖ Bot aktivdir.")
    await send_log_message("‚úÖ Bot aktivdir.")

    await idle()
    

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(start_bot())
    
